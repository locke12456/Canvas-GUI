Index: Graphic/EventHandler/ButtonEvent.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/EventHandler/ButtonEvent.js	(revision )
+++ Graphic/EventHandler/ButtonEvent.js	(revision )
@@ -0,0 +1,26 @@
+/**
+ * Created with JetBrains WebStorm.
+ * User: Locke
+ * Date: 2012/6/19
+ * Time: 上午 9:19
+ * To change this template use File | Settings | File Templates.
+ */
+var Graphic = Graphic = Graphic || {};
+Graphic.ButtonEvent = Graphic.Event.extend({
+    type : "ButtonEvent",
+    triggerType : null
+});
+Graphic.ButtonEvent.TriggerType = {};
+Graphic.ButtonEvent.TriggerType.CLICK = "b_click";
+Graphic.ButtonEvent.BUTTON_CLICK = {
+    type : "button_click",
+    triggerType : Graphic.MouseEvent.TriggerType.CLICK
+};
+Graphic.ButtonEvent.BUTTON_UP = {
+    type : "button_up",
+    triggerType : Graphic.ButtonEvent.TriggerType.CLICK
+};
+Graphic.ButtonEvent.BUTTON_DOWN = {
+    type : "button_down",
+    triggerType : Graphic.ButtonEvent.TriggerType.CLICK
+};
\ No newline at end of file
Index: cocos2d.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cocos2d.js	(revision )
+++ cocos2d.js	(revision )
@@ -0,0 +1,193 @@
+/****************************************************************************
+ Copyright (c) 2010-2012 cocos2d-x.org
+ Copyright (c) 2008-2010 Ricardo Quesada
+ Copyright (c) 2011      Zynga Inc.
+
+ http://www.cocos2d-x.org
+
+ Created by JetBrains WebStorm.
+ User: wuhao
+ Date: 12-3-8
+
+ Permission is hereby granted, free of charge, to any person obtaining a copy
+ of this software and associated documentation files (the "Software"), to deal
+ in the Software without restriction, including without limitation the rights
+ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ copies of the Software, and to permit persons to whom the Software is
+ furnished to do so, subject to the following conditions:
+
+ The above copyright notice and this permission notice shall be included in
+ all copies or substantial portions of the Software.
+
+ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ THE SOFTWARE.
+ ****************************************************************************/
+
+var cc = cc = cc || {};
+//Cocos2d directory
+cc.Dir = './';//in relate to the html file or use absolute
+cc.loadQue = [];//the load que which js files are loaded
+cc.COCOS2D_DEBUG = 2;
+cc._DEBUG = 1;
+cc._IS_RETINA_DISPLAY_SUPPORTED = 0;
+//html5 selector method
+cc.$ = function (x) {
+    return document.querySelector(x);
+};
+cc.$new = function (x) {
+    return document.createElement(x);
+};
+//function to load files into html
+/*
+ cc.loadjs = function(filename)
+ {
+ //get a ref to header
+ var head = cc.$('head');
+ var insert = document.createElement('script');
+ insert.setAttribute('src',cc.Dir+filename);
+ head.appendChild(insert);
+ };*/
+
+cc.loadjs = function (filename) {
+    //add the file to the que
+    var script = cc.$new('script');
+    script.src = cc.Dir + filename;
+    script.order = cc.loadQue.length;
+    cc.loadQue.push(script);
+	
+
+    script.onload = function () {
+        //file have finished loading,
+        //if there is more file to load, we should put the next file on the head
+        if (this.order + 1 < cc.loadQue.length) {
+            cc.$('head').appendChild(cc.loadQue[this.order + 1]);
+            //console.log(this.order);
+        }
+        else {
+            cc.setup("gameCanvas");
+            //we are ready to run the game
+            cc.Loader.shareLoader().onloading = function () {
+                cc.LoaderScene.shareLoaderScene().draw();
+            };
+            cc.Loader.shareLoader().onload = function () {
+                cc.AppController.shareAppController().didFinishLaunchingWithOptions();
+            };
+            //preload ressources
+            cc.Loader.shareLoader().preload([
+                {type:"image", src:"Resources/HelloWorld.png"},
+                {type:"image", src:"Resources/grossini_dance_07.png"},
+                {type:"image", src:"Resources/cocos64.png"},
+                {type:"image", src:"Resources/CloseNormal.png"},
+                {type:"image", src:"Resources/CloseSelected.png"},
+                {type:"image", src:"Resources/Button00_1.png"},
+                {type:"image", src:"Resources/Button01_1.png"},
+                {type:"image", src:"Resources/Button02_1.png"},
+                {type:"image", src:"Resources/Button03_1.png"},
+                {type:"image", src:"Resources/Button04_1.png"},
+                {type:"image", src:"Resources/Button05_1.png"},
+                {type:"image", src:"Resources/Button06_1.png"},
+                {type:"image", src:"Resources/Button07_1.png"},
+                {type:"image", src:"Resources/Button08_1.png"},
+                {type:"image", src:"Resources/Button09_1.png"}
+            ]);
+        }
+    };
+    if (script.order === 0)//if the first file to load, then we put it on the head
+    {
+        cc.$('head').appendChild(script);
+    }
+};
+
+include = function(path)
+{
+    cc.loadjs(path);
+};
+var isDebugMode = true;
+if(!isDebugMode){
+    cc.loadjs('../lib/Cocos2d-html5-canvasmenu-min.js');
+}else{
+    cc.loadjs('lib/platform/CCClass.js');
+    cc.loadjs('lib/platform/CCCommon.js');
+    cc.loadjs('lib/platform/platform.js');
+    cc.loadjs('lib/platform/miniFramework.js');
+    cc.loadjs('lib/platform/ZipUtils.js');
+    cc.loadjs('lib/platform/base64.js');
+    cc.loadjs('lib/platform/gzip.js');
+    cc.loadjs('lib/platform/CCMacro.js');
+    cc.loadjs('lib/platform/CCFileUtils.js');
+    cc.loadjs('lib/platform/CCTypes.js');
+    cc.loadjs('lib/cocoa/CCGeometry.js');
+    cc.loadjs('lib/platform/CCConfig.js');
+    cc.loadjs('lib/cocoa/CCNS.js');
+    cc.loadjs('lib/cocoa/CCSet.js');
+    cc.loadjs('lib/cocoa/CCAffineTransform.js');
+    cc.loadjs('lib/support/CCPointExtension.js');
+    cc.loadjs('lib/base_nodes/CCNode.js');
+    cc.loadjs('lib/base_nodes/CCAtlasNode.js');
+    cc.loadjs('lib/textures/CCTexture2D.js');
+    cc.loadjs('lib/textures/CCTextureCache.js');
+    cc.loadjs('lib/textures/CCTextureAtlas.js');
+    cc.loadjs('lib/misc_nodes/CCRenderTexture.js');
+    cc.loadjs('lib/misc_nodes/CCProgressTimer.js');
+    cc.loadjs('lib/effects/CCGrid.js');
+    cc.loadjs('lib/effects/CCGrabber.js');
+    cc.loadjs('lib/actions/CCAction.js');
+    cc.loadjs('lib/actions/CCActionInterval.js');
+    cc.loadjs('lib/actions/CCActionInstant.js');
+    cc.loadjs('lib/actions/CCActionManager.js');
+    cc.loadjs('lib/actions/CCActionProgressTimer.js');
+    cc.loadjs('lib/actions/CCActionCamera.js');
+    cc.loadjs('lib/actions/CCActionEase.js');
+    cc.loadjs('lib/actions/CCActionGrid.js');
+    cc.loadjs('lib/actions/CCActionTiledGrid.js');
+    cc.loadjs('lib/actions/CCActionGrid.js');
+    cc.loadjs('lib/layers_scenes_transitions_nodes/CCScene.js');
+    cc.loadjs('lib/layers_scenes_transitions_nodes/CCLayer.js');
+    cc.loadjs('lib/layers_scenes_transitions_nodes/CCTransition.js');
+    cc.loadjs('lib/layers_scenes_transitions_nodes/CCTransitionProgress.js');
+    cc.loadjs('lib/layers_scenes_transitions_nodes/CCTransitionPageTurn.js');
+    cc.loadjs('lib/sprite_nodes/CCSprite.js');
+    cc.loadjs('lib/sprite_nodes/CCAnimation.js');
+    cc.loadjs('lib/sprite_nodes/CCAnimationCache.js');
+    cc.loadjs('lib/sprite_nodes/CCSpriteFrame.js');
+    cc.loadjs('lib/sprite_nodes/CCSpriteFrameCache.js');
+    cc.loadjs('lib/sprite_nodes/CCSpriteBatchNode.js');
+    cc.loadjs('lib/label_nodes/CCLabelAtlas.js');
+    cc.loadjs('lib/label_nodes/CCLabelTTF.js');
+    cc.loadjs('lib/label_nodes/CCLabelBMFont.js');
+    cc.loadjs('lib/particle_nodes/CCParticleSystem.js');
+    cc.loadjs('lib/particle_nodes/CCParticleSystemQuad.js');
+    cc.loadjs('lib/particle_nodes/CCParticleExamples.js');
+    cc.loadjs('lib/touch_dispatcher/CCTouchDelegateProtocol.js');
+    cc.loadjs('lib/touch_dispatcher/CCTouchHandler.js');
+    cc.loadjs('lib/touch_dispatcher/CCTouchDispatcher.js');
+    cc.loadjs('lib/keypad_dispatcher/CCKeypadDelegate.js');
+    cc.loadjs('lib/keypad_dispatcher/CCKeypadDispatcher.js');
+    cc.loadjs('lib/text_input_node/CCIMEDispatcher.js');
+    cc.loadjs('lib/text_input_node/CCTextFieldTTF.js');
+    cc.loadjs('lib/CCDirector.js');
+    cc.loadjs('lib/CCCamera.js');
+    cc.loadjs('lib/CCScheduler.js');
+    cc.loadjs('lib/CCLoader.js');
+    cc.loadjs('lib/CCDrawingPrimitives.js');cc.loadjs('lib/platform/AppControl.js');
+    cc.loadjs('lib/platform/CCApplication.js');
+    cc.loadjs('lib/platform/CCSAXParser.js');
+
+
+    cc.loadjs('lib/menu_nodes/CCMenuItem.js');
+    cc.loadjs('lib/menu_nodes/CCMenu.js');
+
+    cc.loadjs('lib/tileMap_parallax_nodes/CCTMXTiledMap.js');
+    cc.loadjs('lib/tileMap_parallax_nodes/CCTMXXMLParser.js');
+    cc.loadjs('lib/tileMap_parallax_nodes/CCTMXObjectGroup.js');
+    cc.loadjs('lib/tileMap_parallax_nodes/CCTMXLayer.js');
+    cc.loadjs('lib/tileMap_parallax_nodes/CCParallaxNode.js');
+
+    cc.loadjs('lib/SimpleAudioEngine.js');
+}
+include('Main.js');//19
Index: Main_.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Main_.js	(revision )
+++ Main_.js	(revision )
@@ -0,0 +1,320 @@
+include('Classes/AppDelegate.js');
+//19
+include('Graphic/Event/Event.js');
+include('Graphic/Event/MouseEvent.js');
+include('Graphic/Animation/Animation.js');
+include('Graphic/Basic/Sprite.js');
+//19
+var main;
+var Main = cc.Layer.extend({
+    bIsMouseDown:false,
+    _m_tBeginPos:null,
+    helloImg:null,
+    helloLabel:null,
+    circle:null,
+    pSprite:null,
+    size:null,
+    Sprite:null,
+    Child:null,
+    Center:null,
+    pTheta:0,
+    ptheta:0,
+    cycle:null,
+    init:function () {
+        //////////////////////////////
+        // 1. super init first
+        this._super();
+        this.initLayer();
+        this.setIsTouchEnabled(true);
+        //this._position = this.getPosition();
+        return true;
+    },
+    ccTouchesBegan:function (pTouches, pEvent) {
+        if (!this.bIsMouseDown) {
+            this._m_tBeginPos = cc.ccp(pTouches[0].locationInView(0).x, pTouches[0].locationInView(0).y);
+            //this._m_tBeginPos = pTouches[0].locationInView(0).y;
+        }
+        this.bIsMouseDown = true;
+    },
+    ccTouchesMoved:function (pTouches, pEvent) {
+        if (this.bIsMouseDown) {
+            var touchLocation = pTouches[0].locationInView(0).y;
+            var nMoveY = touchLocation - this._m_tBeginPos;
+            var curPos = cc.ccp(this.getPosition().x, this.getPosition().y);
+            var nextPos = cc.ccp(curPos.x, curPos.y + nMoveY);
+            var winSize = cc.Director.sharedDirector().getWinSize();
+
+            if (nextPos.y < 0.0) {
+                return;
+            }
+            this._m_tBeginPos = cc.ccp(pTouches[0].locationInView(0).x, pTouches[0].locationInView(0).y);
+            s_tCurPos = nextPos;
+        }
+    },
+    ccTouchesEnded:function () {
+        this.bIsMouseDown = false;
+    },
+    closeCallback:function () {
+        history.go(-1);
+    },
+    update:null
+});
+//Main.bIsMouseDown = null;
+Main.prototype.initLayer = function () {
+    /////////////////////////////
+    // 2. add a menu item with "X" image, which is clicked to quit the program
+    //    you may modify it.
+    // ask director the window size
+    var size = this.size = cc.Director.sharedDirector().getWinSize();
+
+    this._m_tBeginPos = cc.PointZero();
+
+    // add a "close" icon to exit the progress. it's an autorelease object
+    var pCloseItem = cc.MenuItemImage.create("Resources/CloseNormal.png", "Resources/CloseSelected.png", this, this.closeCallback);
+    pCloseItem.setAnchorPoint(new cc.Point(0.5, 0.5));
+
+    var pMenu = cc.Menu.create(pCloseItem, null);
+    pMenu.setPosition(cc.PointZero());
+    this.addChild(pMenu, 1);
+
+    pCloseItem.setPosition(new cc.Point(size.width - 30, 30));
+
+    /////////////////////////////
+    // 3. add your codes below...
+    // add a label shows "Hello World"
+    // create and initialize a label
+    this.helloLabel = cc.LabelTTF.create("哈囉 World", "Arial", 38);
+    // position the label on the center of the screen
+    this.helloLabel.setPosition(cc.ccp(size.width / 2, size.height - 40));
+    // add the label as a child to this layer
+    this.addChild(this.helloLabel, 5);
+
+    var lazyLayer = new cc.LazyLayer();
+    this.addChild(lazyLayer);
+
+    // add "HelloWorld" splash screen"
+    this.pSprite = cc.Sprite.create("Resources/HelloWorld.png");
+    this.pSprite.setAnchorPoint(cc.ccp(0.5, 0.5));
+    this.pSprite.setPosition(cc.ccp(size.width / 2, size.height / 2));
+    this.Center = new cc.Point(size.width / 2, size.height / 2);
+    this.Sprite = new Graphic.Sprite();
+    this.Sprite.load("Resources/CloseNormal.png");
+    this.Sprite.x = 200;
+    this.Sprite.y = 200;
+    var Child = this.Child = new Graphic.Sprite();
+    Child.load("Resources/CloseSelected.png");
+    Child.x = 140;
+    Child.y = 140;
+    this.Sprite.addChild(Child);
+    this.Child.addEventListener(Graphic.MouseEvent.MOUSE_OVER, test_complete);
+    //this.Child.addEventListener(Graphic.MouseEvent.MOUSE_OUT, test_out);
+    lazyLayer.addChild(this.pSprite, 0);
+
+    lazyLayer = new cc.LazyLayer();
+    this.addChild(lazyLayer);
+    lazyLayer.addChild(this.Sprite, 4);
+    var color = [cc.RED(), cc.GREEN(), cc.BLUE()];
+    this.cycle = [];
+    this.pTheta = 0;
+
+    for (var i = 1, j = 1, k = 32; i < 115; i++) {
+
+        var pChild = new Graphic.Sprite();
+        pChild.load("Resources/CloseSelected.png");
+        var point = Main.Recyle(this.pTheta);
+        pChild.x = 20 + point.x * (j * 32);//(i + 10) / 10 * 32;
+        pChild.y = 20 + point.y * (j * 32);
+        this.pTheta = (this.pTheta + k);
+        if (k > 0) {
+            k = this.pTheta > 360 ? k - 6 : k;
+            j = this.pTheta > 360 ? j + 1 : j;
+            if (this.pTheta > 360 || i == 1) {
+                Child = new Graphic.Sprite();
+                Child.load("Resources/CloseSelected.png");
+                Child.x = size.width / 2;// + 20;
+                Child.y = size.height / 2;// + 20;
+                this.cycle.push(Child);
+                lazyLayer.addChild(Child);
+            }
+        }
+        else k = 4;
+        this.pTheta %= 360;
+        Child.addChild(pChild);
+        //j=this.pTheta==0?j+1:j;
+        pChild.setTag("pChild_" + i);
+        pChild.addEventListener(Graphic.MouseEvent.MOUSE_OVER, test_in);
+        pChild.addEventListener(Graphic.MouseEvent.MOUSE_OUT, test_out);
+
+    }
+    this.cycle[this.cycle.length - 2].setRotation(90);
+
+    //this.addChild(Child);
+    //Child.setRotation(90);
+    //pChild.setTag("pChild_" + i);
+    //pChild.addEventListener(Graphic.MouseEvent.MOUSE_DOWN, test_in);
+    //pChild.addEventListener(Graphic.MouseEvent.MOUSE_UP, test_out);
+    //a.width = 100;
+
+    cc.Director.sharedDirector().getScheduler().scheduleUpdateForTarget(this, 0, false);
+
+};
+var test_out = function (evt) {
+    //aptana.log("your log message");
+    var now = parseInt(evt.target.getCurrentPosition().x) + "," + parseInt(evt.target.getCurrentPosition().y);
+    now += "   " + evt.target.getTag() + ",(" + parseInt(evt.target.mouseX) + "," + parseInt(evt.target.mouseY);
+    now += ")   " + parseInt(evt.target._m_tBeginPos.x) + "," + parseInt(evt.target._m_tBeginPos.y);
+    //aptana.log(now);
+    evt.target.stage.helloLabel.setString(now);
+    var num = cc.ActionManager.sharedManager().numberOfRunningActionsInTarget(evt.target);
+    if (evt.target.actions == null) {
+        evt.target.actions = [];
+        var speed = 0.5;
+        evt.target.actionIndex = 0;
+        var actionTo = cc.ScaleTo.create(speed, 2);
+        var actionBy = cc.ScaleBy.create(speed, .5);
+        var actionBy2 = cc.ScaleBy.create(0, 2);
+        var actionByBack = actionBy.reverse();
+        var actionBy2Back = actionBy2.reverse();
+        evt.target.actions.push(actionTo);
+        evt.target.actions.push(actionBy);
+        evt.target.actions.push(actionBy2);
+    }
+    if (evt.target.actionIndex == 1) {
+        // evt.target.runAction(evt.target.actions[evt.target.actionIndex]);
+        evt.target.setOpacity(255);
+        if (num != 0) {
+            cc.ActionManager.sharedManager().removeAction(evt.target.actions[0], evt.target);
+            evt.target.setScale(2);
+        }
+        cc.ActionManager.sharedManager().addAction(evt.target.actions[evt.target.actionIndex], evt.target);
+        evt.target.actionIndex = 0;
+        //evt.target.runAction(evt.target.actions[2]);
+    }
+};
+var test_in = function (evt) {
+
+    var now = parseInt(evt.target.getCurrentPosition().x) + "," + parseInt(evt.target.getCurrentPosition().y);
+    now += "   " + evt.target.getTag() + ",(" + parseInt(evt.target.mouseX) + "," + parseInt(evt.target.mouseY);
+    now += ")   " + parseInt(evt.target._m_tBeginPos.x) + "," + parseInt(evt.target._m_tBeginPos.y);
+    evt.target.stage.helloLabel.setString(now);
+    var num = cc.ActionManager.sharedManager().numberOfRunningActionsInTarget(evt.target);
+    if (evt.target.actions == null) {
+        evt.target.actions = [];
+        var speed = 0.5;
+        evt.target.actionIndex = 0;
+        var actionTo = cc.ScaleTo.create(speed, 2);
+        var actionBy = cc.ScaleBy.create(speed, .5);
+        var actionBy2 = cc.ScaleBy.create(0, 2);
+        evt.target.actions.push(actionTo);
+        evt.target.actions.push(actionBy);
+        evt.target.actions.push(actionBy2);
+
+    }
+    //Graphic.Animation.Queue.add(evt.target.actions[evt.target.actionIndex], Graphic.Dispatcher(Graphic.Event.COMPLETE, evt.target, test_complete));
+    //evt.target.removeEventListener(Graphic.MouseEvent.MOUSE_OVER, test_in);
+    //return;
+    if (evt.target.actionIndex == 0) {
+        evt.target.setOpacity(127);
+        if (num != 0) {
+            cc.ActionManager.sharedManager().removeAction(evt.target.actions[evt.target.actionIndex], evt.target);
+            evt.target.setScale(1);
+        }
+
+        cc.ActionManager.sharedManager().addAction(evt.target.actions[evt.target.actionIndex], evt.target);
+        evt.target.actionIndex = 1;
+    }
+};
+var test_complete = function (evt) {
+    if (evt.target.actions == null) {
+        evt.target.actions = [];
+        var speed = 0.5;
+        evt.target.actionIndex = 0;
+        var actionTo = cc.ScaleTo.create(speed, 2);
+        var actionBy = cc.ScaleBy.create(speed, .5);
+        var actionBy2 = cc.ScaleBy.create(0, 2);
+        evt.target.actions.push(actionTo);
+        evt.target.actions.push(actionBy);
+        evt.target.actions.push(actionBy2);
+        // evt.target.removeEventListener(Graphic.MouseEvent.MOUSE_OVER, test_complete);
+    }
+    if (evt.target.actionIndex == 0)evt.target.removeEventListener(Graphic.MouseEvent.MOUSE_OVER, test_complete);
+    var action = evt.target.actions[evt.target.actionIndex % 2];
+    evt.target.actionIndex = (evt.target.actionIndex + 1) % 21;
+    if (evt.target.actionIndex == 0) {
+        evt.target.addEventListener(Graphic.MouseEvent.MOUSE_OVER, test_complete);
+    } else
+        Graphic.Animation.Queue.add(action, Graphic.Dispatcher(Graphic.Event.COMPLETE, evt.target, test_complete));
+};
+Main.prototype.update = function () {
+    //return;
+    var string = ["H", "E", "L", "L", "O", " ", "W", "O", "R", "L", "D", "!"];
+    var time = cc.Director.sharedDirector().getTimeScale();
+    if (time == 1) {
+        //this.helloLabel.setPosition(cc.ccp(this.size.width / 2, this.size.height - (Math.random() * 100)));
+        /*
+         var now = "";//parseInt(this.Sprite.mouseX) + "," + parseInt(this.Sprite.mouseY);
+         now = this.helloLabel.getString();
+         var index = parseInt(this.pTheta / 10) % string.length;
+         if(index == 0)
+         now = "";
+         now = index != now.length ? now : now + string[index];
+         this.helloLabel.setString(now);
+         */
+    } else {
+
+    }
+    if (this.Sprite != null) {
+        var parent = this.Sprite.parent;
+        var point = Main.Recyle(-this.pTheta);
+        this.pTheta = (this.pTheta + 1) % 360;
+        this.Sprite.x = Math.floor(this.Center.x + (point.x * 192));
+        //=this.a.x+1;
+        this.Sprite.y = Math.floor(this.Center.y + (point.y * 192));
+        this.Sprite.setRotation(this.pTheta);
+        point = Main.Recyle(this.ptheta);
+        this.ptheta = (this.ptheta + 5) % 360;
+        //this.Child.setPosition(cc.ccp((20+(point.x*30),20+(point.y*30))));
+        this.Child.x = Math.floor(20 + (point.x * (this.Child.width * 0.7)));
+        this.Child.y = Math.floor(20 + (point.y * (this.Child.height * 0.7)));
+        this.Child.setRotation(this.ptheta);
+        this.cycle[this.cycle.length - 2].setRotation(this.ptheta);
+        this.cycle[this.cycle.length - 4].setRotation(-this.pTheta);
+        //for(var i = 0;i<this.cycle.length;i++)
+        //    this.cycle[i].setRotation(i%2==0?0:this.pTheta);
+    }
+
+};
+Main.Recyle = function (theta) {
+    var radians = theta * (Math.PI) / 180;
+    var point = new cc.Point();
+    point.x = Math.sin(radians);
+    point.y = Math.cos(radians);
+    return point;
+};
+Main.scene = function () {
+    // 'scene' is an autorelease object
+    var scene = cc.Scene.create();
+    // 'layer' is an autorelease object
+    var layer = this.node();
+    scene.addChild(layer);
+    return scene;
+};
+
+// implement the "static node()" method manually
+Main.node = function () {
+    var pRet = new Main();
+
+    // Init the Main display layer.
+    if (pRet && pRet.init()) {
+        main = pRet;
+        return pRet;
+    }
+
+    return null;
+};
+Main.sharedLayer = function () {
+    if (main != null)
+        return main;
+    else
+        return Main.node();
+};
Index: Graphic/Basic/Sprite.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/Basic/Sprite.js	(revision )
+++ Graphic/Basic/Sprite.js	(revision )
@@ -0,0 +1,423 @@
+var Graphic = Graphic = Graphic || {};
+
+Graphic.Sprite = cc.Sprite.extend({
+    _x:null,
+    _y:null,
+    _mask:null,
+    _maskShow:null,
+    _m_tBeginPos:null,
+    _m_tInRange:false,
+    _m_tOutRangeDispatched:false,
+    _m_tInRangeDispatched:false,
+    _m_tRect:null,
+    _m_tCurrentRect:null,
+    _m_tScaleX:null,
+    _m_tScaleY:null,
+    _m_tParentRotationChanged:true,
+    _m_tParentRotation:0,
+    _m_pParentRotation:null,
+    _m_tParentPosition:null,
+    _m_tCurrentPosition:null,
+    _m_tTouchStart:false,
+    _m_tRangeChecked:false,
+    _listening:false,
+    _listeningChildren:[],
+    _sleeping:false,
+    _main:false,
+    touchPosition:null,
+    Trigger:null,
+    ctor:function (pFile) {
+        if (pFile != null)
+            this.initWithFile(pFile);
+        else
+            this.init();
+    },
+    init:function () {
+        this._super();
+        this._sleeping = this._listening = false;
+        this.setAnchorPoint(cc.ccp(0.5, 0.5));
+        //this._position = this.getPosition();
+        this._m_tBeginPos = this._m_tParentPosition = cc.PointZero();
+        this._m_tRect = this._m_tCurrentRect = new cc.Rect(0, 0, this.getTextureRect().size.width, this.getTextureRect().size.height);
+        this._m_tScaleX = this._m_tScaleY = 1;
+
+        this.Trigger = {};
+    },
+    load:function (pFile) {
+        if (pFile != null)
+            this.initWithFile(pFile);
+        else
+            this.init();
+    },
+    addChild:function (pChild, zOrder) {
+        this._super(pChild, zOrder);
+        if (this.getRotation() != 0) {
+            pChild._m_tParentRotationChanged = true;
+            pChild._m_tParentRotation = Math.floor(this.getRotation());
+        }
+        //if (pChild instanceof Graphic.Sprite)
+        //    pChild.updateEventListener();
+        //pChild.parent = this;
+    },
+    setPosition:function (cPoint) {
+        this._position = cPoint;
+        this._super(cc.ccp(cPoint.x, cPoint.y));
+    },
+    parentSacleChange:function (x, y) {
+        if (x) {
+            this._m_tScaleX = x;
+            for (var i = 0; i < this.numChildren; i++) {
+                this.getChildAt(i).parentSacleChange(value);
+            }
+        }
+        if (y) {
+            this._m_tScaleY = y;
+            for (var i = 0; i < this.numChildren; i++) {
+                this.getChildAt(i).parentSacleChange(null, value);
+            }
+        }
+    },
+    setScale:function (value) {
+        this._super(value);
+        this.setScaleX(value);
+        this.setScaleY(value);
+    },
+    setScaleX:function (value) {
+        this._super(value);
+        this._m_tScaleX = value;
+        if (this.getTextureRect().size.width != 0)
+            this._m_tRect.size.width = Math.floor(this.getTextureRect().size.width * Math.abs(value));
+    },
+    setScaleY:function (value) {
+        this._super(value);
+        this._m_tScaleY = value;
+        if (this.getTextureRect().size.height != 0)
+            this._m_tRect.size.height = Math.floor(this.getTextureRect().size.height * Math.abs(value));
+    },
+    setOpacity:function (value) {
+        this._super(value);
+        for (var i = 0; i < this.numChildren; i++) this.getChildAt(i).setOpacity(value);
+    },
+    setRotation:function (value) {
+        this._super(value);
+        for (var i = 0; i < this.numChildren; i++) {
+            this.getChildAt(i)._m_tParentRotationChanged = true;
+            this.getChildAt(i)._m_tParentRotation = Math.floor(value);
+        }
+    },
+    setPosition:function(ponit){
+        this._super(ponit);
+        this._m_tParentRotationChanged = true;
+    },
+    setChildrenPositionChanged:function(){
+        for (var i = 0; i < this.numChildren; i++)
+            this.getChildAt(i)._m_tParentRotationChanged = true;
+    },
+    _setNodeDirtyForCache:function () {
+        this._super();
+        if (this._isCacheDirty) {
+            this._m_tParentRotationChanged = true;
+            if (this.numChildren > 0) {
+                this._m_tCurrentRect = this.boundingBoxToWorld();
+                this.setChildrenPositionChanged();
+                if (this.getTextureRect().size.width == 0)
+                    this._m_tRect = this._m_tCurrentRect;
+            }
+        }
+    },
+    _removeUpdate:function (listen_array, entry) {
+        var element = listen_array.indexOf(entry);
+        if (element != -1) {
+            listen_array.splice(element, 1);
+        }
+    },
+    _addUpdate:function (listen_array, entry) {
+        var element = listen_array.indexOf(entry);
+        if (element == -1) {
+            listen_array.push(entry);
+        }
+    },
+    ccTouchesBegan:function (pTouches, pEvent) {
+        this._m_tBeginPos = pTouches[0].locationInView(0);
+        //var touch = cc.ccpSub(this._m_tBeginPos, this.getCurrentPosition());
+        var InRange = this.isInRange();
+        this._m_tInRange = InRange;
+        if (InRange) {
+            this.dispatchEvent(Graphic.MouseEvent.MOUSE_DOWN);
+        }
+        if (!this.bIsMouseDown) {
+
+        }
+        this.bIsMouseDown = true;
+        //this.visitUpdate("ccTouchesBegan", pTouches);
+    },
+    ccTouchesMoved:function (pTouches, pEvent) {
+        this._m_tBeginPos = pTouches[0].locationInView(0);
+        //var touch = cc.ccpSub(this._m_tBeginPos, this.getCurrentPosition());
+        var InRange = this.isInRange();
+        this._m_tInRange = InRange;
+        this.dispatchEvent(Graphic.MouseEvent.MOUSE_MOVE);
+
+        if (this._m_tInRangeDispatched && !InRange) {
+            //if (this.hasEventListener(Graphic.MouseEvent.MOUSE_OUT))
+            this.dispatchEvent(Graphic.MouseEvent.MOUSE_OUT);
+            this._m_tOutRangeDispatched = true;
+            this._m_tInRangeDispatched = !this._m_tOutRangeDispatched;
+        } else if (InRange) {
+            this.dispatchEvent(Graphic.MouseEvent.MOUSE_OVER);
+            this._m_tOutRangeDispatched = false;
+            this._m_tInRangeDispatched = !this._m_tOutRangeDispatched;
+        }
+        if (InRange) {
+            this.AllWake();
+
+        } else {
+            this.AllSleep();
+        }
+        //this.visitUpdate("ccTouchesMoved", pTouches);
+    },
+    ccTouchesEnded:function (pTouches, pEvent) {
+        this._m_tBeginPos = pTouches[0].locationInView(0);
+        //var touch = cc.ccpSub(this._m_tBeginPos, this.getCurrentPosition());
+        var InRange = this.isInRange();
+        this._m_tInRange = InRange;
+        if (this.bIsMouseDown) {
+            this.dispatchEvent(Graphic.MouseEvent.MOUSE_UP);
+            if (InRange) {
+                this.dispatchEvent(Graphic.MouseEvent.MOUSE_CLICK);
+            }
+        }
+        //this.visitUpdate("ccTouchesEnded", pTouches);
+        this.bIsMouseDown = false;
+    },
+    visitUpdate:function (event, touch) {
+        for (var i = 0; i < this._listeningChildren.length; i++)
+            this._listeningChildren[i][event](touch);
+    },
+    visit:function (ctx) {
+        // quick return if not visible
+        if (!this._isVisible) {
+            return;
+        }
+        var context = ctx || cc.renderContext;
+
+        context.save();
+
+        if (this._grid && this._grid.isActive()) {
+            this._grid.beforeDraw();
+            this.transformAncestors();
+        }
+
+        this.transform(context);
+        var i, node;
+        if (this._children) {
+            // draw children zOrder < 0
+            for (i = 0; i < this._children.length; i++) {
+                node = this._children[i];
+                if (node && node._zOrder < 0) {
+                    node.visit(context);
+                } else {
+                    break;
+                }
+            }
+        }
+        this.draw(context);
+        if (this._children) {
+            for (; i < this._children.length; i++) {
+                node = this._children[i];
+                if (node && node._zOrder >= 0) {
+                    node.visit(context);
+                }
+            }
+        }
+        if (this._maskShow) {
+            ctx.globalCompositeOperation = "destination-out";
+            if (this._mask) {
+                this._mask.visit(ctx);
+            }
+            ctx.globalCompositeOperation = "source-over";
+        }
+        if (this._grid && this._grid.isActive()) {
+            this._grid.afterDraw(this);
+        }
+
+        context.restore();
+
+    },
+    update:function () {
+    }
+});
+Graphic.Sprite.prototype.position = function () {
+    var t = this.nodeToWorldTransform();
+    var s = new cc.Size(this.width, this.height);
+    s.width = t.a * s.width + t.c * s.height;
+    s.height = t.b * s.width + t.d * s.height;
+    this._m_tParentRotationChanged = false;
+    return cc.ccpAdd(cc.ccp(t.tx, t.ty), cc.ccp(s.width / 2, s.height / 2));
+};
+Graphic.Sprite.prototype.getCurrentPosition = function () {
+    if (this.parent == this.stage)return this._position;
+    if (this._m_tParentRotationChanged){
+        var point = this.position();
+        this._m_tCurrentPosition = cc.ccp(Math.floor(point.x), Math.floor(point.y));
+        this.setChildrenPositionChanged();
+    }
+    return this._m_tCurrentPosition;
+};
+Graphic.Sprite.prototype.hitTest = function (point) {
+    var width = ((this._m_tScaleX == 1) ? this.width : this._m_tRect.size.width) / 2;
+    var height = ((this._m_tScaleY == 1) ? this.height : this._m_tRect.size.height) / 2;
+    return Math.abs(point.x) < width && Math.abs(point.y) < height;
+};
+Graphic.Sprite.prototype.isInRange = function () {
+    //if(this._m_tRangeChecked)return this._m_tInRange;
+    var touch = this.touchPosition = cc.ccpSub(this._m_tBeginPos, this.getCurrentPosition());
+    this._m_tRangeChecked = true;
+    return this.hitTest(touch);
+};
+Graphic.Sprite.prototype.getChildAt = function (index) {
+    return (this._children == null && index < this._children.length) ? null : this._children[index];
+};
+Graphic.Sprite.prototype.dispatchEvent = function (type) {
+    if (this.hasEventListener(type))
+        Graphic.Event.dispatchEvent(type, this);
+};
+/*
+ @type
+ */
+Graphic.Sprite.prototype.updateEventListener = function () {
+    if (this.parent && this._listening && !this._sleeping)
+        this.parent.addListening(this);
+    else if (this.parent && !this._listening && this._sleeping) {
+        this.parent.removeListening(this);
+    }
+};
+Graphic.Sprite.prototype.hasEventListener = function (type) {
+    if (this.Trigger[type.triggerType] == null)
+        return false;
+    if (this.Trigger[type.triggerType][type.type] == null)
+        return false;
+    return true;
+};
+Graphic.Sprite.prototype.addEventListener = function (type, trigger) {
+    if (!this._m_tTouchStart) {
+        this._listening = true;
+        this._sleeping = false;
+        this.WakeUp();
+    }
+    if (this.Trigger[type.triggerType] == null)
+        this.Trigger[type.triggerType] = {};
+    if (this.Trigger[type.triggerType][type.type] == null)
+        this.Trigger[type.triggerType][type.type] = function () {
+        };
+    this.Trigger[type.triggerType][type.type] = trigger;
+};
+
+Graphic.Sprite.prototype.removeEventListener = function (type, trigger) {
+    if (this.hasEventListener(type) && this.Trigger[type.triggerType][type.type] == trigger)
+        this.Trigger[type.triggerType][type.type] = null;
+    else return;
+    if (!this._m_tTouchStart)return;
+    for (var name in this.Trigger) {
+        for (var v in this.Trigger[name]) {
+            if (this.Trigger[name][v] != null)
+                return;
+        }
+    }
+    this.Sleep();
+    this._sleeping = true;
+    this._listening = false;
+};
+Graphic.Sprite.prototype.addListening = function (target) {
+    if (target)
+        this._addUpdate(this._listeningChildren, target);
+};
+Graphic.Sprite.prototype.removeListening = function (target) {
+    if (target)
+        this._removeUpdate(this._listeningChildren, target);
+};
+Graphic.Sprite.prototype.AllSleep = function () {
+    if (this._sleeping)return;
+    for (var i = 0; i < this.numChildren; i++) {
+        this.getChildAt(i).Sleep();
+    }
+    this._sleeping = true;
+};
+Graphic.Sprite.prototype.AllWake = function () {
+    if (!this._sleeping)return;
+    for (var i = 0; i < this.numChildren; i++) {
+        this.getChildAt(i).WakeUp();
+    }
+    this._sleeping = false;
+};
+Graphic.Sprite.prototype.Sleep = function () {
+    if (!this._listening)return;
+    //if (this._main)
+    cc.Director.sharedDirector().getTouchDispatcher().removeDelegate(this);
+    //else {
+    //    if (this.parent) {
+    //        this.parent.removeListening(this);
+    //    }
+    //}
+    this._m_tTouchStart = false;
+};
+Graphic.Sprite.prototype.WakeUp = function () {
+    if (!this._listening)return;
+    //if (this._main) {
+    cc.Director.sharedDirector().getTouchDispatcher().addStandardDelegate(this, 1);
+    //} else {
+    //        this.addListening(this);
+    //}
+    this._m_tTouchStart = true;
+};
+Graphic.Sprite.prototype.__defineGetter__("x", function () {
+    return this.getPosition().x;
+});
+
+Graphic.Sprite.prototype.__defineSetter__("x", function (value) {
+    var point = cc.ccp(value, this.y);
+    this.setPosition(point);
+    //this._position.x = value;
+});
+
+Graphic.Sprite.prototype.__defineGetter__("y", function () {
+    return this.getPosition().y;
+});
+
+Graphic.Sprite.prototype.__defineSetter__("y", function (value) {
+    var point = cc.ccp(this.x, value);
+    this.setPosition(point);
+    //this._position.y = value;
+});
+
+Graphic.Sprite.prototype.__defineGetter__("parent", function () {
+    return this.getParent();
+});
+
+Graphic.Sprite.prototype.__defineGetter__("mouseX", function () {
+    return this._m_tBeginPos.x - this.getCurrentPosition().x;
+});
+
+Graphic.Sprite.prototype.__defineGetter__("mouseY", function () {
+    return this._m_tBeginPos.y - this.getCurrentPosition().y;
+});
+
+Graphic.Sprite.prototype.__defineGetter__("mouseInRange", function () {
+    return this._m_tInRange;
+});
+
+Graphic.Sprite.prototype.__defineGetter__("numChildren", function () {
+    return this._children == null ? 0 : this._children.length;
+});
+
+Graphic.Sprite.prototype.__defineGetter__("width", function () {
+    return this._m_tScaleX != 1 || this._rect.size.width == 0 ? this._m_tRect.size.width : this._rect.size.width;
+});
+
+Graphic.Sprite.prototype.__defineGetter__("height", function () {
+    return this._m_tScaleY != 1 || this._rect.size.height == 0 ? this._m_tRect.size.height : this._rect.size.height;
+});
+
+Graphic.Sprite.prototype.__defineGetter__("stage", function () {
+    return Main.sharedLayer();
+});
Index: Graphic/Effect/Convolution.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/Effect/Convolution.js	(revision )
+++ Graphic/Effect/Convolution.js	(revision )
@@ -0,0 +1,116 @@
+/**
+ * Created with JetBrains WebStorm.
+ * User: Locke
+ * Date: 2012/6/19
+ * Time: 下午 3:30
+ * To change this template use File | Settings | File Templates.
+ */
+var Graphic = Graphic = Graphic || {};
+Graphic.Effect = cc.Class.extend({
+    ctor:function () {
+
+    }
+});
+Graphic.Effect.Bevel = {
+    /* 斜角效果 */
+    matrix:[0, 0, 0,
+        0, 0, 0,
+        0, 0 , 1],
+    divisor:1,
+    offset:0
+};
+Graphic.Effect.vBevel = {
+    /* 斜角效果 */
+    matrix:[1, 0, 0,
+        0, 0, 0,
+        0, 0, 0],
+    divisor:1,
+    offset:0
+};
+Graphic.Effect.embossing = {
+    /* 浮雕效果 */
+    matrix:[-2, -1, 0,
+        -1, 1, 1,
+        0, 1, 2],
+    divisor:1,
+    offset:0
+};
+Graphic.Effect.edge = {
+    /* 邊緣檢測 */
+    matrix:[
+        0, -1, 0,
+        -1, 4, -1,
+        0, -1, 0],
+    divisor:1,
+    offset:0
+},
+    Graphic.Effect.sharpening = {
+        /* 锐化 */
+        matrix:[
+            0, -1, 0,
+            -1, 5, -1,
+            0, -1, 0],
+        divisor:1,
+        offset:0
+    };
+Graphic.Effect.blur = {
+    /* 基本模糊 */
+    matrix:[0, 1, 0,
+        1, 1, 1,
+        0, 1, 0],
+    divisor:5,
+    offset:0
+};
+Graphic.Effect.Convolution = function (ctx, imgPixels, filter, minAlpha) {
+    if (!minAlpha)minAlpha = 0;
+    var matrix = filter.matrix, divisor = filter.divisor, offset = filter.offset;
+    var w = imgPixels.width,
+        h = imgPixels.height,
+        d = imgPixels.data;
+    var newImgPixels = ctx.createImageData(w, h);
+    for (var y = 0; y < h; y++) {
+        for (var x = 0; x < w; x++) {
+            for (var c = 0; c < 3; c++) {//rgb
+
+                var i = (y * w + x) * 4 + c;
+                newImgPixels.data[i] = (matrix[0] * d[i - (w + 1) * 4] + matrix[1] * d[i - w * 4] + matrix[2] * d[i - (w - 1) * 4]
+                    + matrix[3] * d[i - 4] + matrix[4] * d[i] + matrix[5] * d[i + 4]
+                    + matrix[6] * d[i + (w - 1) * 4] + matrix[7] * d[i + w * 4] + matrix[8] * d[i + (w + 1) * 4])
+                    / divisor + offset;
+            }
+            //alpha
+            var alpha = d[(y * w + x) * 4 + 3];
+            newImgPixels.data[(y * w + x) * 4 + 3] = alpha < minAlpha ? alpha : 255;
+        }
+    }
+    return newImgPixels;
+}
+Graphic.Effect.BevelFilter = function (ctx, imgPixels, xoffset, yoffset, minAlpha) {
+    if (!minAlpha)minAlpha = 0;
+    var filter = Graphic.Effect.Bevel;
+    var matrix = filter.matrix, divisor = filter.divisor, offset = filter.offset;
+    var w = imgPixels.width,
+        h = imgPixels.height,
+        width = w - Math.floor(w * xoffset),
+        height = h - Math.floor(h * yoffset),
+        d = imgPixels.data;
+    var newImgPixels = ctx.createImageData(w, h);
+    for (var y = 1; y < h - 1; y++) {
+        for (var x = 1; x < w - 1; x++) {
+            for (var c = 0; c < 3; c++) {//rgb
+
+                var i = (y * w + x) * 4 + c;
+                if (x >= width && y >= height) {
+                    newImgPixels.data[i] = (matrix[0] * d[i - (w + 1) * 4] + matrix[1] * d[i - w * 4] + matrix[2] * d[i - (w - 1) * 4]
+                        + matrix[3] * d[i - 4] + matrix[4] * d[i] + matrix[5] * d[i + 4]
+                        + matrix[6] * d[i + (w - 1) * 4] + matrix[7] * d[i + w * 4] + matrix[8] * d[i + (w + 1) * 4])
+                        / divisor + offset;
+                } else newImgPixels.data[i] = d[i];
+            }
+            //alpha
+            var alpha = d[(y * w + x) * 4 + 3];
+            newImgPixels.data[(y * w + x) * 4 + 3] = alpha < minAlpha ? alpha : 255;
+        }
+    }
+    return newImgPixels;
+}
\ No newline at end of file
Index: Classes/AppDelegate.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Classes/AppDelegate.js	(revision )
+++ Classes/AppDelegate.js	(revision )
@@ -0,0 +1,91 @@
+/****************************************************************************
+ Copyright (c) 2010-2012 cocos2d-x.org
+ Copyright (c) 2008-2010 Ricardo Quesada
+ Copyright (c) 2011      Zynga Inc.
+
+ http://www.cocos2d-x.org
+
+ Permission is hereby granted, free of charge, to any person obtaining a copy
+ of this software and associated documentation files (the "Software"), to deal
+ in the Software without restriction, including without limitation the rights
+ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ copies of the Software, and to permit persons to whom the Software is
+ furnished to do so, subject to the following conditions:
+
+ The above copyright notice and this permission notice shall be included in
+ all copies or substantial portions of the Software.
+
+ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ THE SOFTWARE.
+ ****************************************************************************/
+
+var cc = cc = cc || {};
+
+/**
+ @brief    The cocos2d Application.
+
+ The reason for implement as private inheritance is to hide some interface call by CCDirector.
+ */
+cc.AppDelegate = cc.Application.extend({
+    ctor:function () {
+        this._super();
+    },
+    /**
+     @brief    Implement for initialize OpenGL instance, set source path, etc...
+     */
+    initInstance:function () {
+        return true;
+    },
+
+    /**
+     @brief    Implement CCDirector and CCScene init code here.
+     @return true    Initialize success, app continue.
+     @return false   Initialize failed, app terminate.
+     */
+    applicationDidFinishLaunching:function () {
+        // initialize director
+        var director = cc.Director.sharedDirector();
+
+        // enable High Resource Mode(2x, such as iphone4) and maintains low resource on other devices.
+//     director->enableRetinaDisplay(true);
+
+        // turn on display FPS
+        director.setDisplayStats(true);
+
+        //cc.SPRITE_DEBUG_DRAW = 1;
+
+        // director->setDeviceOrientation(CCDEVICE_ORIENTATION_LANDSCAPE_LEFT);
+
+        // set FPS. the default value is 1.0/60 if you don't call this
+        director.setAnimationInterval(1.0 / 60);
+
+        // create a scene. it's an autorelease object
+        var scene = new Main.scene();
+
+        // run
+        director.runWithScene(scene);
+
+        return true;
+    },
+
+    /**
+     @brief  The function be called when the application enter background
+     @param  the pointer of the application
+     */
+    applicationDidEnterBackground:function () {
+        cc.Director.sharedDirector().pause();
+    },
+
+    /**
+     @brief  The function be called when the application enter foreground
+     @param  the pointer of the application
+     */
+    applicationWillEnterForeground:function () {
+        cc.Director.sharedDirector().resume();
+    }
+});
\ No newline at end of file
Index: Graphic/com/include.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/com/include.js	(revision )
+++ Graphic/com/include.js	(revision )
@@ -0,0 +1,16 @@
+/**
+ * Created with JetBrains WebStorm.
+ * User: Locke
+ * Date: 2012/6/26
+ * Time: 上午 9:41
+ * To change this template use File | Settings | File Templates.
+ */
+var Graphic = Graphic = Graphic || {};
+Graphic.lib_path = Graphic.lib_path || "";
+Graphic.com = Graphic.lib_path + "Graphic/com/";
+include(Graphic.com + 'Button.js');
+include(Graphic.com + 'SimpleButton.js');
+include(Graphic.com + 'ScrollBar.js');
+include(Graphic.com + 'DataGrid.js');
+include(Graphic.com + 'TextInputBox.js');
+include(Graphic.com + 'Window.js');
\ No newline at end of file
Index: build.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.xml	(revision )
+++ build.xml	(revision )
@@ -0,0 +1,55 @@
+<?xml version="1.0"?>
+<project name="Javascript compress project" basedir="." default="compile">
+
+    <taskdef name="jscomp" classname="com.google.javascript.jscomp.ant.CompileTask"
+             classpath="${basedir}/../tools/compiler/compiler.jar"/>
+
+    <target name="compile">
+        <jscomp compilationLevel="simple" warning="quiet"
+                debug="false" output="cocos2d-html5-alpha-min.js">
+            <sources dir="${basedir}/../cocos2d">
+                <file name="platform/CCClass.js"/>
+                <file name="platform/CCCommon.js"/>
+                <file name="platform/platform.js"/>
+                <file name="cocoa/CCGeometry.js"/>
+                <file name="cocoa/CCSet.js"/>
+                <file name="cocoa/CCNS.js"/>
+                <file name="platform/CCTypes.js"/>
+                <file name="cocoa/CCAffineTransform.js"/>
+                <file name="support/CCPointExtension.js"/>
+                <file name="base_nodes/CCNode.js"/>
+                <file name="platform/ccMacro.js"/>
+                <file name="platform/ccConfig.js"/>
+                <file name="textures/CCTexture2D.js"/>
+                <file name="textures/CCTextureCache.js"/>
+                <file name="actions/CCAction.js"/>
+                <file name="actions/CCActionInterval.js"/>
+                <file name="actions/CCActionManager.js"/>
+                <file name="actions/CCActionEase.js"/>
+                <file name="layers_scenes_transitions_nodes/CCScene.js"/>
+                <file name="layers_scenes_transitions_nodes/CCLayer.js"/>
+                <file name="layers_scenes_transitions_nodes/CCTransition.js"/>
+                <file name="sprite_nodes/CCSprite.js"/>
+                <file name="label_nodes/CCLabelTTF.js"/>
+                <file name="text_input_node/CCIMEDispatcher.js"/>
+                <file name="touch_dispatcher/CCTouchDelegateProtocol.js"/>
+                <file name="touch_dispatcher/CCTouchHandler.js"/>
+                <file name="touch_dispatcher/CCTouchDispatcher.js"/>
+                <file name="keypad_dispatcher/CCKeypadDelegate.js"/>
+                <file name="keypad_dispatcher/CCKeypadDispatcher.js"/>
+                <file name="CCDirector.js"/>
+                <file name="CCScheduler.js"/>
+                <file name="CCLoader.js"/>
+                <file name="CCDrawingPrimitives.js"/>
+                <file name="platform/CCApplication.js"/>
+                <file name="platform/CCSAXParser.js"/>
+                <file name="platform/AppControl.js"/>
+                <file name="menu_nodes/CCMenuItem.js"/>
+                <file name="menu_nodes/CCMenu.js"/>
+            </sources>
+            <sources dir="${basedir}/../CocosDenshion">
+                <file name="SimpleAudioEngine.js"/>
+            </sources>
+        </jscomp>
+    </target>
+</project>
\ No newline at end of file
Index: Graphic/Basic/Mask.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/Basic/Mask.js	(revision )
+++ Graphic/Basic/Mask.js	(revision )
@@ -0,0 +1,18 @@
+/**
+ * Created with JetBrains WebStorm.
+ * User: Locke
+ * Date: 2012/7/4
+ * Time: 上午 10:26
+ * To change this template use File | Settings | File Templates.
+ */
+var Graphic = Graphic = Graphic || {};
+
+Graphic.Mask = Graphic.Sprite.extend({
+
+    ctor:function(){
+        this._super();
+    },
+    visit:function(ctx){
+        this._super(ctx);
+    }
+});
\ No newline at end of file
Index: Graphic/Control/include.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/Control/include.js	(revision )
+++ Graphic/Control/include.js	(revision )
@@ -0,0 +1,11 @@
+/**
+ * Created with JetBrains WebStorm.
+ * User: Locke
+ * Date: 2012/6/26
+ * Time: 上午 9:41
+ * To change this template use File | Settings | File Templates.
+ */
+var Graphic = Graphic = Graphic || {};
+Graphic.lib_path = Graphic.lib_path || "";
+Graphic.Control = Graphic.lib_path + "Graphic/Control/";
+include(Graphic.Control + 'Animation.js');
Index: Graphic/EventHandler/MouseEvent.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/EventHandler/MouseEvent.js	(revision )
+++ Graphic/EventHandler/MouseEvent.js	(revision )
@@ -0,0 +1,39 @@
+/**
+ * @author Locke
+ */
+
+var Graphic = Graphic = Graphic || {};
+Graphic.MouseEvent = Graphic.Event.extend({
+    type : "MouseEvent",
+    triggerType : null
+});
+Graphic.MouseEvent.TriggerType = {};
+Graphic.MouseEvent.TriggerType.MOVE = "move";
+//Graphic.MouseEvent.TriggerType.MOVE_IN = "move_in";
+//Graphic.MouseEvent.TriggerType.MOVE_OUT = "move_out";
+Graphic.MouseEvent.TriggerType.CLICK = "click_up";
+//Graphic.MouseEvent.TriggerType.CLICK_DOWN = "click_down";
+Graphic.MouseEvent.MOUSE_CLICK = {
+    type : "mouse_click",
+    triggerType : Graphic.MouseEvent.TriggerType.CLICK
+};
+Graphic.MouseEvent.MOUSE_UP = {
+    type : "mouse_up",
+    triggerType : Graphic.MouseEvent.TriggerType.CLICK
+};
+Graphic.MouseEvent.MOUSE_DOWN = {
+    type : "mouse_down",
+    triggerType : Graphic.MouseEvent.TriggerType.CLICK
+};
+Graphic.MouseEvent.MOUSE_OVER = {
+    type : "mouse_over",
+    triggerType : Graphic.MouseEvent.TriggerType.MOVE
+};
+Graphic.MouseEvent.MOUSE_OUT = {
+    type : "mouse_out",
+    triggerType : Graphic.MouseEvent.TriggerType.MOVE
+};
+Graphic.MouseEvent.MOUSE_MOVE = {
+    type : "mouse_move",
+    triggerType : Graphic.MouseEvent.TriggerType.MOVE
+};
Index: Graphic/com/Window.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/com/Window.js	(revision )
+++ Graphic/com/Window.js	(revision )
@@ -0,0 +1,33 @@
+/**
+ * Created with JetBrains WebStorm.
+ * User: Locke
+ * Date: 2012/6/26
+ * Time: 上午 10:45
+ * To change this template use File | Settings | File Templates.
+ */
+var Graphic = Graphic = Graphic || {};
+Graphic.Component = Graphic.Component||{};
+Graphic.Component.Window = Graphic.Sprite.extend({
+    _m_tForeground:null,
+    _m_tBackground:null,
+    ctor:function()
+    {
+        this.init();
+    },
+    init:function()
+    {
+        this._super();
+        this._m_tBackground = new Graphic.Sprite();
+        this.addChild(this._m_tBackground);
+        this._m_tForeground = new Graphic.Sprite();
+        this.addChild(this._m_tForeground);
+    },
+    addToBackground:function(object,index)
+    {
+        this._m_tBackground.addChild(object,index);
+    },
+    addToForeground:function(object,index)
+    {
+        this._m_tForeground.addChild(object,index);
+    }
+});
\ No newline at end of file
Index: .project
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .project	(revision )
+++ .project	(revision )
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>Cocos2dTest</name>
+	<comment></comment>
+	<projects>
+		<project>JavaScript</project>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>com.aptana.ide.core.unifiedBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>com.aptana.projects.webnature</nature>
+	</natures>
+	<variableList>
+		<variable>
+			<name>Main</name>
+			<value>file:/D:/JavaScript/Aptana/Cocos2dTest</value>
+		</variable>
+	</variableList>
+</projectDescription>
Index: Main.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Main.js	(revision )
+++ Main.js	(revision )
@@ -0,0 +1,218 @@
+include('Classes/AppDelegate.js');
+//19
+include('Graphic/EventHandler/include.js');
+include('Graphic/Control/include.js');
+include('Graphic/Utils/Utils.js');
+include('Graphic/Effect/Convolution.js');
+include('Graphic/Basic/include.js');
+include('Graphic/com/include.js');
+include('io.js');
+//19
+
+var main;
+var Main = cc.Layer.extend({
+    bIsMouseDown:false,
+    label:null,
+    size:null,
+    Center:null,
+    win:null,
+    time:0,
+    item:[],
+    init:function () {
+        //////////////////////////////
+        // 1. super init first
+        this._super();
+//        this.setIsTouchEnabled(true);
+        //this._position = this.getPosition();
+        return true;
+    },
+    onEnter:function () {
+        this._super();
+        this.initLayer();
+    },
+    update:function () {
+        if (this.item.length > 0) {
+            if (this.time++ % 30 == 0)
+                this.win.addItem(this.item.shift());
+        }
+        //this.label.setString(this.win.getScrollProgress());
+    },
+    closeCallback:function () {
+        history.go(-1);
+    }
+});
+//Main.bIsMouseDown = null;
+Main.prototype.initLayer = function () {
+    var size = this.size = cc.Director.sharedDirector().getWinSize();
+    var back = cc.LayerColor.create(cc.ccc4(0, 0, 0, 128), size.width, size.height);
+    var x = size.width / 4;
+    var lazyLayer = new cc.LazyLayer();
+    lazyLayer.addChild(back);
+    this.addChild(lazyLayer);
+    this.label = cc.LabelTTF.create("哈囉 World", "Arial", 38);
+    // position the label on the center of the screen
+    this.label.setPosition(cc.ccp(size.width / 2, size.height - 40));
+    // add the label as a child to this layer
+    this.addChild(this.label, 5);
+    //var rect =  new Graphic.Sprite();
+    //rect.load("Resources/Button00_1.png");
+    //Graphic.Utils.FillRect(ctx, cc.RectMake(0, 0, 50, 50), cc.ccc4(255, 255, 255, 255), Graphic.Utils.Gradient.RectVFrom, [cc.ccc4(220, 220, 220, 255),cc.ccc4(225, 225, 225, 255),cc.ccc4(245, 245, 245, 255)]);
+    /*
+     this.win = new Graphic.ScrollBar(18,192);
+     this.win.setPosition(cc.ccp(size.width / 2, size.height / 2));
+     this.win.setThumbSize(80);
+     var lazyLayer = new cc.LazyLayer();
+     this.addChild(lazyLayer);
+     lazyLayer.addChild(this.win);*/
+
+    this.win = new Graphic.Component.DataGrid.DataGridView(cc.SizeMake(321, 320), cc.SizeMake(320, 32));
+    this.win.setPosition(cc.ccp(size.width / 2, size.height / 2));
+    this.win.columns = [
+        {label:"ID", width:15},
+        {label:"Group", width:20},
+        {label:"Information", width:45},
+        {label:"Record", width:20}
+    ];//,{label:"5",width:20}];
+
+    //this.win.addChild(this.win._mask);
+
+    this.item.push({ID:1, Group:"a", Information:"asd", Record:"一"});
+    this.item.push({ID:3, Group:"b", Information:"eewl", Record:"二"});
+    this.item.push({ID:5, Group:"ct", Information:"qqq", Record:"三"});
+    this.item.push({ID:4, Group:"ABC", Information:"null", Record:"玖"});
+    this.item.push({ID:6, Group:"CCC", Information:"null", Record:"陸"});
+    this.item.push({ID:2, Group:"BDA", Information:"null", Record:"柒"});
+    this.item.push({ID:4, Group:"ABC", Information:"null", Record:"捌"});
+    this.item.push({ID:6, Group:"CCC", Information:"null", Record:"拾"});
+    this.item.push({ID:2, Group:"BDA", Information:"null", Record:"壹"});
+    this.item.push({ID:4, Group:"ABC", Information:"null", Record:"四"});
+    this.item.push({ID:6, Group:"CCC", Information:"null", Record:"五"});
+    this.item.push({ID:2, Group:"BDA", Information:"null", Record:"六"});
+    /**/
+    //this.win.sortBy("ID");
+    //this.win.sortItem();
+
+    //this.win.setTextureRectInPixels(cc.RectMake(0,0,640,200),false,cc.SizeMake(640,320));
+    //this.win._rect=cc.RectMake(0,0,600,280);
+    var lazyLayer = new cc.LazyLayer();
+    this.addChild(lazyLayer);
+
+    lazyLayer.addChild(this.win);
+    /*
+     /*
+     var texture = Graphic.Utils.GradientTexture( cc.SizeMake(254, 254), cc.ccc4(255, 255, 255, 255), Graphic.Utils.Gradient.RectVFrom, [cc.ccc4(240, 240, 240, 255),cc.ccc4(255, 255, 255, 255)]);
+     texture = Graphic.Utils.SetTextureBackgroundSize(texture,256,256);
+     texture = Graphic.Utils.TextureToImageData(texture);
+     texture = Graphic.Effect.Convolution(cc.renderContext, texture, Graphic.Effect.Bevel, 254);
+
+     this.win = new Graphic.Sprite();
+     this.win.initWithTexture(Graphic.Utils.ImageDatasToTexture(texture));
+     this.win.setPosition(cc.ccp(size.width / 2, size.height / 2));
+     lazyLayer.addChild(this.win);
+     var width=function(value){ return Math.floor(value/100*256);};
+     var button = new Graphic.SimpleButton(width(30),32);
+     button.y=this.win.height-32;
+     button.setText("ID");
+     this.win.addChild(button);
+     var button1 = new Graphic.SimpleButton(width(50),32);
+     button1.y=this.win.height-32;
+
+     button1.setText("Information");
+     button1.x= button.width-2;
+     this.win.addChild(button1);
+     var button = new Graphic.SimpleButton(width(20)+4,32);
+     button.y=this.win.height-32;
+     button.setText("Count");
+     button.x= button1.x+button1.width-2;
+     this.win.addChild(button);
+     /*
+     this.win = new Graphic.SimpleButton();
+     // this.win.initWithTexture(texture);
+     this.win.setPosition(cc.ccp(size.width / 2, size.height / 2));
+     this.win.setText("按鈕");
+     lazyLayer.addChild(this.win);
+     //lazyLayer.addChild(rect);
+     /*
+     var rect = new Graphic.Sprite();
+     rect.load("src/image/rect.png");
+     var rect_inside = new Graphic.Sprite();
+     rect_inside.load("src/image/rect_inside.png");
+     var tWin = this.win = new Graphic.Window();
+     //tWin.init();
+     tWin.addToBackground(rect_inside);
+     tWin.addToForeground(rect);
+     // When five parameters
+     //textField.setPosition(cc.ccp(50, 0));
+     rect_inside.setScaleX(1.15);
+     rect_inside.setScaleY(1.12);
+     rect_inside.y += 6;
+     tWin.setPosition(cc.ccp(size.width / 2, size.height / 2));
+     tWin.setScale(2);
+     // tWin.addEventListener(Graphic.MouseEvent.MOUSE_CLICK, moveLU);
+
+     this.addChild(tWin);
+
+     var speed = 0.1;
+     var action = [cc.MoveTo.create(speed, cc.ccp(tWin.width / 2, size.height - tWin.height / 2)),
+     cc.MoveTo.create(speed, cc.ccp(size.width - tWin.width / 2, size.height - tWin.height / 2)),
+     cc.MoveTo.create(speed, cc.ccp(size.width - tWin.width / 2, size.height - tWin.height)),
+     cc.MoveTo.create(speed, cc.ccp(tWin.width / 2, size.height - tWin.height))
+     ];
+
+     var scale = [cc.ScaleTo.create(speed, -2, -2), cc.ScaleTo.create(speed, 2, -2), cc.ScaleTo.create(speed, 2, 2), cc.ScaleTo.create(speed, -2, 2)];
+     tWin.scale = scale;
+     tWin.action = action;
+     tWin.setScale(.5);
+     tWin.runAction(cc.ScaleTo.create(0.5, 4, 1));
+     tWin.actionIndex = 0;
+     */
+    cc.Director.sharedDirector().getScheduler().scheduleUpdateForTarget(this, 0, false);
+
+};
+var button = function (evt) {
+    var sprite = evt.target;
+
+    var bIsMouseDown = (evt.type == Graphic.MouseEvent.MOUSE_DOWN);
+    sprite.getChildAt(1).setVisible(bIsMouseDown);
+    sprite.getChildAt(0).setVisible(!bIsMouseDown);
+};
+var move = function (evt) {
+    var sprite = evt.target;
+
+    var bIsMouseDown = (evt.type == Graphic.MouseEvent.MOUSE_OVER);
+    sprite.setOpacity(bIsMouseDown ? 192 : 255);
+};
+var moveLU = function (evt) {
+    var tWin = evt.target;
+    var size = cc.Director.sharedDirector().getWinSize();
+    tWin.runAction(tWin.action[tWin.actionIndex]);
+    tWin.runAction(tWin.scale[tWin.actionIndex]);
+    tWin.actionIndex = (tWin.actionIndex + 1) % tWin.action.length;
+};
+Main.scene = function () {
+    // 'scene' is an autorelease object
+    var scene = cc.Scene.create();
+    // 'layer' is an autorelease object
+    var layer = Main.node();
+    scene.addChild(layer);
+    return scene;
+};
+
+// implement the "static node()" method manually
+Main.node = function () {
+    var pRet = new Main();
+
+    // Init the Main display layer.
+    if (pRet && pRet.init()) {
+        main = pRet;
+        return pRet;
+    }
+
+    return null;
+};
+Main.sharedLayer = function () {
+    if (main != null)
+        return main;
+    else
+        return Main.node();
+};
Index: index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- index.html	(revision )
+++ index.html	(revision )
@@ -0,0 +1,292 @@
+<!DOCTYPE HTML>
+<html>
+<head>
+    <meta charset="utf-8">
+    <title>Cocos2d-HTML5 Hello World</title>
+</head>
+<style type="text/css">
+    * {
+        margin: 0;
+        padding: 0;
+    }
+    .msg {
+        position: fixed;
+        top: 60px;
+        z-index: 2;
+        border-collapse: collapse;
+        background: rgba(255%, 255%, 255%, 0);
+        opacity:0;
+    }
+
+    body {
+        font-family: Verdana, Geneva, sans-serif;
+        font-size: 16px;
+    }
+    #popup_bg {
+        position: absolute;
+        width: 100%;
+        height: 100%;
+        left: 0;
+        top: 0;
+        z-index: 1;
+        background: #000000;
+        opacity:0;
+    }
+
+
+
+    .top_left {
+        background: url(images/pop_dialog_top_left.png) no-repeat scroll 0 0;
+    }
+
+    .top_right {
+        background: url(images/pop_dialog_top_right.png) no-repeat scroll 0 0;
+    }
+
+    .border {
+        background: url(images/pop_dialog_border.png) scroll 0 0;
+    }
+
+    .bot_left {
+        background: url(images/pop_dialog_bottom_left.png) no-repeat scroll 0 0;
+    }
+
+    .bot_right {
+        background: url(images/pop_dialog_bottom_right.png) no-repeat scroll 0 0;
+    }
+
+    .top_left,.top_right,.bot_left,.bot_right {
+        height: 10px;
+        width: 10px;
+        padding: 0;
+        overflow: hidden;
+    }
+
+    .content {
+        background: #FFF;
+        padding: 0;
+    }
+
+    .popup {
+        width: 600px;
+        border: 1px solid #669bb7;
+        margin: auto;
+        position: relative;
+    }
+
+    .popup_top {
+        background: #FF9bb7;
+        color: #FFF;
+    }
+
+    h4 {
+        border: 1px solid #88b8d2;
+        padding: 8px 10px;
+    }
+    h5 {
+        border: 1px solid #000000;
+        padding: 8px 10px;
+    }
+
+    #popup_close {
+        position: absolute;
+        top: 10px;
+        right: 10px;
+        height: 15px;
+        width: 15px;
+        background: url(images/close.png) no-repeat scroll 0 0;
+        cursor: pointer;
+    }
+
+    #popup_close:hover {
+        background: url(images/close.png) no-repeat scroll 0 -25px;
+    }
+
+    .popup_content {
+        padding: 10px;
+        line-height: 30px;
+        background: #FFF;
+    }
+
+    .popup_bot {
+        background: #E6EFF3;
+        border-top: 1px solid #E0E0E0;
+        padding: 8px;
+        text-align: right;
+    }
+
+    .submit {
+        background: #669bb7;
+        color: #FFF;
+        padding: 3px 8px;
+        border-color: #B8D4E8 #124680 #124680 #B8D4E8;
+        border-style: solid;
+        border-width: 1px;
+        margin: 0 5px;
+        cursor: pointer;
+    }
+
+    .cancel {
+        background: #F0F0F0;
+        color: #333;
+        padding: 3px 8px;
+        border-color: #FFFFFF #848484 #848484 #FFFFFF;
+        border-style: solid;
+        border-width: 1px;
+        margin: 0 5px;
+        cursor: pointer;
+    }
+</style>
+<body style="text-align: center;background: #f2f6f8;">
+
+<script src="jquery.min.js"></script>
+<script type="text/javascript">
+    $(function(){
+        $('#table1').hide();
+        $('#popup_bg').hide();
+        center();
+        showInput();
+    });
+    function center()
+    {
+        var item = $('#table1');
+        var winWidth = $(window).width();
+        var winHeight = $(window).height();
+        var popwidth = $(".popup").width();
+        var popheight = $(item).height();
+        var left = winWidth/2 - popwidth/2;
+        var top = winHeight/2 - popheight/2;
+        $(item).css("left", left);
+        $(item).css("top", top);
+    }
+    function show()
+    {
+        $(".popup").width(600);
+        $('#popup_bg').css("opacity","0.7");
+        $('#table1').css("opacity","1");
+        $('#table1').show();
+        $('#popup_bg').show();
+        //$('#table1').fadeIn(800);
+        //$('#popup_bg').fadeIn(500);
+        $("#ISBN").show();
+        $("#form").hide();
+        center();
+        document.getElementsByTagName("h4")[0].innerText = "什麼是ISBN";
+        $('#popup_close,#popup_bg').unbind("click");
+        $('#popup_close,#popup_bg').click(FadeOut);
+    }
+    function showInput()
+    {
+        alert("查無資料，請輸入書籍資訊。");
+        $(".popup").width(260);
+        $('#popup_bg').css("opacity","0.7");
+        $('#table1').css("opacity","1");
+        //$('#table1').css("opacity","1");
+        //$('#popup_bg').css("opacity","0.5");
+        $('#table1').show();
+        $('#popup_bg').show();
+        //$('#table1').fadeIn(800);
+        //$('#popup_bg').fadeIn(500);
+        $("#form").show();
+        $("#ISBN").hide();
+        center();
+        document.getElementsByTagName("h4")[0].innerText = "請輸入書籍資訊";
+        $('#popup_close,#popup_bg').unbind("click");
+        $('#popup_close').click(FadeOut);
+
+    }
+    function FadeOut()
+    {
+        $('#table1').hide();
+        $('#popup_bg').hide();
+    }
+    function Submit()
+    {
+        var book = $("#book_NAME").val();
+        if(book == "")
+        {
+            alert("請輸入書名！");
+            return;
+        }
+        book = $("#Barcode").val();
+        if(book.length < 10)
+        {
+            alert("請檢察ISBN有無輸入錯誤！");
+            return;
+        }
+
+        $.post('bin/Update.php?type=1&id='+getID(),{
+            book_NAME: $("#book_NAME").val(),
+            book_AUTHOR: $("#book_AUTHOR").val(),
+            book_info: $("#book_info").val(),
+            book_Publisher: $("#book_Publisher").val(),
+            book_ISBN: $("#Barcode").val()
+        }, request);
+    }
+    function request(msg)
+    {
+        //alert(msg);
+        if(msg==1)
+        {
+            alert("ISBN錯誤，請檢察ISBN有無輸入錯誤！");
+            return;
+        }
+        FadeOut();
+        $("#book_NAME").val("");
+        $("#book_AUTHOR").val("");
+        $("#book_info").val("");
+        $("#book_Publisher").val("");
+        $("#Barcode").val("");
+        sendToActionScript(msg);
+    }
+
+</script>
+<div style="display:inline-block;width:auto; margin: auto auto; border:5px solid black; border-radius: 10px; box-shadow: 0 5px 50px #333">
+    <canvas id="gameCanvas" width="550" height="550"></canvas>
+</div>
+<div id="popup_bg"></div>
+<div id="table1" class="msg">
+    <tbody>
+    <tr>
+        <td class="top_left" />
+        <td class="border" /><td class="top_right" />
+    </tr>
+    <tr>
+        <td class="border" />
+        <td class="content">
+            <div class="popup"></div>
+            <div class="popup_top">
+                <h4>什麼是ISBN</h4>
+                <span id="popup_close"></span>
+            </div>
+            <div class="popup_content" align=center>
+
+                <img id="ISBN" src= "images/ISBN_V2.jpg">
+                <div  align="right">
+                    <form id = "form">
+                        <h5>書名：<input 	id = "book_NAME" type="text"/></h5>
+                        <h5>作者：<input 	id = "book_AUTHOR" type="text"/></h5>
+                        <h5>出版社	：<input id = "book_Publisher" type="text"/></h5>
+                        <h5>頁數：<input 	id = "book_info" type="text"/></h5>
+                        <h5>ISBN：<input id = "Barcode" type="text"/></h5>
+                        <input type="button" class = "submit" id = "do" onclick = "Submit();" value ="確定" />
+                    </form>
+                </div>
+            </div>
+            <div class="popup_bot"></div>
+        </td>
+        <td class="border" />
+    </tr>
+    <tr>
+        <td class="bot_left" />
+        <td class="border" />
+        <td class="bot_right" />
+    </tr>
+    </tbody>
+</div>
+<script src="cocos2d.js"></script>
+<script language="JavaScript">
+
+</script>
+</body>
+</html>
\ No newline at end of file
Index: Graphic/com/DataGrid.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/com/DataGrid.js	(revision )
+++ Graphic/com/DataGrid.js	(revision )
@@ -0,0 +1,511 @@
+/**
+ * Created with JetBrains WebStorm.
+ * User: Locke
+ * Date: 2012/6/19
+ * Time: 上午 9:30
+ * To change this template use File | Settings | File Templates.
+ */
+var Graphic = Graphic = Graphic || {};
+Graphic.Component = Graphic.Component || {};
+Graphic.Component.DataGrid = Graphic.Component.DataGrid || {};
+Graphic.Component.DataGrid.Sort = null;
+Graphic.Component.DataGrid.SortType = null;
+Graphic.Component.DataGrid.SortCase = "UPPER";
+Graphic.Component.DataGrid.BEGIN_SORT = function (evt) {
+    var target = evt.target;
+    var DataGridView = target.parent.parent;
+    Graphic.Component.DataGrid.SortCase = Graphic.Component.DataGrid.SortCase == "UPPER" ? "LOWER" : "UPPER";
+    DataGridView.sortBy(target.id);
+    DataGridView.sortItem();
+};
+Graphic.Component.DataGrid.UPPER = function (a, b) {
+    if (Graphic.Component.DataGrid.SortType == "Number") return parseFloat(a[Graphic.Component.DataGrid.Sort]) - parseFloat(b[Graphic.Component.DataGrid.Sort]);
+    else {
+        var a = a[Graphic.Component.DataGrid.Sort].label.toLowerCase();
+        var b = b[Graphic.Component.DataGrid.Sort].label.toLowerCase();
+        return b.localeCompare(a);//(a < b) ? -1 : 1;
+    }
+};
+Graphic.Component.DataGrid.LOWER = function (a, b) {
+    if (Graphic.Component.DataGrid.SortType == "Number") return parseFloat(b[Graphic.Component.DataGrid.Sort]) - parseFloat(a[Graphic.Component.DataGrid.Sort]);
+    else {
+        var a = a[Graphic.Component.DataGrid.Sort].label.toLowerCase();
+        var b = b[Graphic.Component.DataGrid.Sort].label.toLowerCase();
+        return a.localeCompare(b);//(a > b) ? -1 : 1;
+    }
+};
+Graphic.Component.DataGrid.SCROLL = function (evt) {
+    var data_grid = evt.target.parent;
+    //if (data_grid._scrollbar.getScrollProgress() % 5 == 0)
+    data_grid._update = true;
+};
+Graphic.Component.DataGrid.DataGridView = Graphic.Sprite.extend({
+    item:null,
+    _default_texture:null,
+    _default_texture_size:null,
+    _column:null,
+    _row:null,
+    _rows:null,
+    _rowHeight:null,
+    _sortBy:null,
+    _gridSize:null,
+    _columnSize:null,
+    _update:false,
+    _updateRate:0,
+    _scrollbar:null,
+    _maskLeft:null,
+    _maskRight:null,
+    _maskUp:null,
+    _maskDown:null,
+    _hideItemStartIndex:0,
+    _hideItemEndIndex:0,
+    ctor:function (gridSize, columnSize) {
+        this._gridSize = gridSize;
+        this._columnSize = columnSize;
+        if (!gridSize) {
+            this._gridSize = cc.SizeMake(Graphic.Component.DataGrid.defaultWidth, Graphic.Component.DataGrid.defaultHeight);
+        }
+        if (!columnSize) {
+            this._columnSize = cc.SizeMake(Graphic.Component.DataGrid.defaultColumnWidth, Graphic.Component.DataGrid.defaultColumnHeight);
+        }
+        this.init();
+        var texture = Graphic.Utils.GradientTexture(cc.SizeMake(this._gridSize.width - 2, this._gridSize.height - 2), cc.ccc4(255, 255, 255, 255), Graphic.Utils.Gradient.RectVFrom, [cc.ccc4(240, 240, 240, 240), cc.ccc4(255, 255, 255, 255)]);
+        texture = Graphic.Utils.SetTextureBackgroundSize(texture, this._gridSize.width, this._gridSize.height);
+        texture = Graphic.Utils.TextureToImageData(texture);
+        texture = Graphic.Effect.Convolution(cc.renderContext, texture, Graphic.Effect.Bevel, 254);
+        var size = cc.SizeMake(this._columnSize.height * .5, this._gridSize.height - this._columnSize.height * 2);
+        this._scrollbar = new Graphic.Component.ScrollBar(size.width, size.height);
+        this._scrollbar.setPosition(cc.ccp(this._gridSize.width - size.width / 2, this._gridSize.height / 2 - this._columnSize.height * .5 - 2));
+        this._scrollbar.addEventListener(Graphic.ScrollEvent.SCROLL, Graphic.Component.DataGrid.SCROLL);
+        this.initWithTexture(Graphic.Utils.ImageDatasToTexture(texture));
+        this.addEventListener(Graphic.MouseEvent.MOUSE_MOVE, function (evt) {
+        });
+        this.initMask();
+        cc.Director.sharedDirector().getScheduler().scheduleUpdateForTarget(this, 0, false);
+    },
+    init:function () {
+        this._super();
+        this._column = new Graphic.Component.DataGrid.Columns(Graphic.Component.DataGrid.defaultColumnMinWidth, this._columnSize.width, this._columnSize.height);
+        this._row = new Graphic.Sprite();
+        this._row.setAnchorPoint(cc.ccp(0, 0));
+        this._rows = [];
+    },
+    initMask:function () {
+        var texture = Graphic.Utils.GradientTexture(cc.SizeMake(this._gridSize.width, this._columnSize.height), cc.ccc4(0, 0, 0, 255));
+
+        this._mask = new Graphic.Sprite();
+        this._maskShow = true;
+        //this.win._mask.setVisible(true);
+        this._maskDown = new Graphic.Sprite();
+        this._maskDown.initWithTexture(texture);
+        this._maskDown.setPosition(cc.ccp(0, -(this._gridSize.height / 2 + this._columnSize.height / 2) + 1));
+        this._mask.addChild(this._maskDown);
+
+        this._maskUp = new Graphic.Sprite();
+        this._maskUp.initWithTexture(texture);
+        this._maskUp.setPosition(cc.ccp(0, (this._gridSize.height / 2 + this._columnSize.height / 2) - 1));
+        this._mask.addChild(this._maskUp);
+    },
+    addItem:function (item) {
+        var type = this._column.getColumnsID();
+        var array = [];
+        var top = (this._gridSize.height - this._columnSize.height);
+        for (var i = 0; i < type.length; i++) {
+            array.push({label:item[type[i].label].toString(), width:type[i].width, type:type[i].label.toString()});
+        }
+        var row = new Graphic.Component.DataGrid.Rows(Graphic.Component.DataGrid.defaultColumnMinWidth, this._columnSize.width, this._columnSize.height);
+        this._rows.push(row);
+        row.__row = array;
+        row.initRows();
+        row.y = ((-this._columnSize.height * (this._rows.length)) + (2 * this._rows.length));
+        this._IsItemOverflow(row);
+        this._rowHeight = ((this._columnSize.height * (this._rows.length)) - (2 * this._rows.length));
+        var overflow = this._rowHeight - top;
+        if (overflow > 0) {
+            var percent = overflow / top * 100;
+            percent = 100 - percent < 0 ? 1 : 100 - percent;
+            this._scrollbar.setThumbSize(percent);
+        }
+        //cc.Log(overflow);
+        if (!this._row.parent) {
+            this.sortItem();
+        }
+        this._row.addChild(row);
+
+        this._update_row();
+    },
+    getScrollOffset:function () {
+        var ScrollTo = this._scrollbar.getScrollProgress();
+        return cc.PointMake(0, ScrollTo + 2);
+    },
+    sortBy:function (arg) {
+        if (this._rows.length < 2)return;
+        var type = parseInt(this._rows[arg]);
+        Graphic.Component.DataGrid.SortType = (typeof type == "int") ? "Number" : "string";
+        Graphic.Component.DataGrid.Sort = arg;
+        this._rows.sort(Graphic.Component.DataGrid[Graphic.Component.DataGrid.SortCase]);
+    },
+    sortItem:function () {
+        var temp = [];
+        this.removeChild(this._scrollbar);
+        this.removeChild(this._column);
+
+        for (var i = 0; i < this._rows.length; i++) {
+            this._row.removeChild(this._rows[i]);
+        }
+        for (var i = 0; i < this._rows.length; i++) {
+            temp.push(this._rows[i]);
+            //this.addChild(temp[i], 0);
+            temp[i].y = ((-this._columnSize.height * (temp.length)) + (2 * temp.length));
+            this._IsItemOverflow(this._rows[i]);
+            this._row.addChild(temp[i], 0);
+        }
+
+        this._update_row();
+        this.addChild(this._row);
+        this.addChild(this._column);
+        this.addChild(this._scrollbar);
+    },
+    setScale:function (value) {
+    },
+    setScaleX:function (value) {
+    },
+    setScaleY:function (value) {
+    },
+    _update_row:function () {
+        var offset = this.getScrollOffset().y;
+        var top = (this._gridSize.height - this._columnSize.height);
+        var bottom = this._rowHeight;
+        var total = bottom < top ? 0 : (bottom - top) / 100;
+        this._row.y = (this._gridSize.height - this._columnSize.height) + total * offset;
+        /*for (var i = 0; i < this._rows.length; i++) {
+         this._rows[i].y = this._column.y - ((this._columnSize.height * (i + 1)) - (2 * (i + 1))) + offset;
+         }*/
+    },
+    _IsItemOverflow:function (item) {
+        //if (!item)return;
+        var overflow = (item.y + this._row.y) < -this._columnSize.height || (item.y + this._row.y) > this._gridSize.height;
+        if (item.isVisible()) {
+            if (overflow)
+                item.setVisible(false);
+        } else {
+            if (!overflow)
+                item.setVisible(true);
+        }
+    },
+    _checkOverflow:function () {
+        //return;
+        if (!this._isCacheDirty)return;
+        if (this._rows.length == 0)return;
+        var endIndex = Math.floor((this._gridSize.height - this._columnSize.height) / this._columnSize.height);
+        if (this._rows.length < endIndex)return;
+        var top = ((this._rows[0].y + this._columnSize.height) + this._row.y);
+        var bottom = ((this._rows[this._rows.length - 1].y - this._columnSize.height) + this._row.y);
+        var startIndex = Math.floor(Math.abs(((top - this._gridSize.height) / this._columnSize.height) + 1));
+        endIndex += startIndex;
+        if (this._hideItemEndIndex == 0)this._hideItemEndIndex = endIndex;
+        cc.Log("[0] start:" + Math.floor(startIndex) + " ,end:" + Math.floor(endIndex) + " ,length:" + this._rows.length);
+        var deviation = this._hideItemStartIndex - startIndex;
+        var begin = startIndex - 2 < 0 ? 0 : startIndex - 2;
+        var end = startIndex + 1;
+        for (var i = begin; i < end; i++) {
+            this._IsItemOverflow(this._rows[i]);
+        }
+        cc.Log("[1] start:" + begin + " ,end:" + end + " ,length:" + this._rows.length);
+
+        var deviation = this._hideItemEndIndex - endIndex;
+        end = endIndex + 3 > this._rows.length ? this._rows.length : endIndex + 3;
+        begin = endIndex - 1;
+        for (var i = begin; i < end; i++) {
+            this._IsItemOverflow(this._rows[i]);
+        }
+        cc.Log("[2] start:" + begin + " ,end:" + end + " ,length:" + this._rows.length);
+        this._hideItemStartIndex = startIndex;
+        this._hideItemEndIndex = endIndex;
+    },
+    visit:function (ctx) {
+        this._checkOverflow();
+        this._super(ctx);
+    },
+    update:function () {
+
+        if (this._update && this._updateRate == 0) {
+            this._update_row();
+            this._updateRate = 0;
+            this._update = false;
+        }
+        this._updateRate = (this._updateRate + 1) % 5;
+    }
+});
+Graphic.Component.DataGrid.DataGridView.prototype.__defineSetter__("columns", function (value) {
+    var size = [];
+    var min = 0, max = 0, deviation = 0;
+    for (var i = 0; i < value.length; i++) {
+        if (typeof value[i] != "string") {
+            size.push(value[i].width);
+        } else {
+            min = 100 / value.length;
+            value[i] = {label:value[i], width:min};
+        }
+        max += value[i].width;
+    }
+    min = (this._column._maxSize(value.length) / value.length) / this._column._maxSize(value.length) * 100;
+    max = 0;
+    for (var i = 0; i < value.length; i++) {
+        size[i] = Math.floor(value[i].width / 100 * this._column._maxSize(value.length));
+        max += size[i];
+    }
+    min = ((this._column._maxSize(value.length) - max) / this._column._maxSize(value.length) ) / value.length * 100;
+    min = Math.floor(min * 1000) / 1000;
+
+    for (var i = 0; i < value.length; i++) {
+        var column;
+        if (typeof value[i] == "string") {
+            column = this._column.addColumn(value[i]);
+        } else {
+            column = this._column.addColumn(value[i].label, value[i].width + min, (i == value.length - 1));
+        }
+    }
+    if (this._column.parent == null) {
+        this._column.y = this._gridSize.height - this._columnSize.height;
+        this.addChild(this._column);
+    }
+});
+Graphic.Component.DataGrid.DataGroup = cc.Class.extend({
+    _member:null,
+    _name:null,
+    ctor:function (groupName) {
+        this._member = [];
+        this._name = groupName;
+    },
+    addMember:function (member) {
+        if (!member)return;
+        member.indexInGroup = this._member.length;
+        this._member.push(member);
+    },
+    removeMember:function (member) {
+        cc.ArrayRemoveObject(this._member, member);
+    },
+    getMembers:function () {
+        return this._member;
+    }
+});
+Graphic.Component.DataGrid.Columns = Graphic.Sprite.extend({
+    _minWidth:0,
+    _maxWidth:0,
+    _def_height:0,
+    _columns:null,
+    __column:null,
+    _deviation:0,
+    ctor:function (minWidth, maxWidth, height) {
+        this._super();
+        this._def_height = height;
+        if (!height) {
+            height = this._def_height = Graphic.Component.DataGrid.defaultColumnHeight;
+        }
+        this._columns = [];
+        this.__column = [];
+        this._maxWidth = maxWidth;
+        this._minWidth = minWidth;
+        this.addEventListener(Graphic.MouseEvent.MOUSE_MOVE, function (evt) {
+        });
+    },
+    addColumn:function (label, width, isLast) {
+        if (!width)width = this._minWidth;
+        this.__column.push({label:label, width:width});
+        if (!isLast) {
+            return;
+        } else {
+            this.initColumns();
+            //this.__column = [];
+        }
+    },
+    initColumns:function () {
+        this._deviation = this.__column.length * 2;
+
+        for (var i = 0; i < this.__column.length; i++) {
+            width = this.__column[i].width;
+            label = this.__column[i].label;
+            var column = new Graphic.Component.DataGrid.Column(label, this._widthCalc(width), this._def_height);
+            column.inColumnWidth = width;
+            column.id = label;
+            column.x = (this._columns.length == 0) ? 0 : (this._columns[this._columns.length - 1].x + this._columns[this._columns.length - 1].width) - 2;
+            column.addEventListener(Graphic.ButtonEvent.BUTTON_CLICK, Graphic.Component.DataGrid.BEGIN_SORT);
+            this._columns.push(column);
+            this.addChild(column, 0);
+        }
+    },
+    getColumns:function () {
+        return this._columns;
+    },
+    getColumnsID:function () {
+        return this.__column;
+    },
+    _widthCalc:function (value) {
+        return Math.floor(value / 100 * (this._maxWidth + this._deviation - 2));
+    },
+    _maxSize:function (length) {
+        return (this._maxWidth + (length * 2) - 2);
+    }
+});
+Graphic.Component.DataGrid.Column = Graphic.Component.SimpleButton.extend({
+    inColumnWidth:0,
+    label:null,
+    ctor:function (label, width, height) {
+        this._super(width, height, Graphic.Component.SimpleButton.Default);
+        if (!label)label = "";
+        this.setText(label);
+    },
+    setText:function (label) {
+        this._super(label);
+        this.label = label;
+    }
+});
+Graphic.Component.DataGrid.RowManager = Graphic.Sprite.extend({
+    _group:null,
+    _index:null,
+    _member:null,
+    _columnSize:null,
+    /*
+     *@param {cc.Size} ColumnSize
+     */
+    ctor:function (ColumnSize) {
+        if (!ColumnSize) throw "Initialize is FAIL!";
+        this._super();
+        this._group = {};
+        this._index = [];
+        this._columnSize = ColumnSize;
+    },
+    setParent:function (parent) {
+        this._super(parent);
+    },
+    /*
+     *@param {function} func
+     */
+    sort:function (func) {
+        var temp = [];
+        this._index = [];
+        for (var i = 0; i < this._member.length; i++) {
+            this.removeChild(this._member[i]);
+            temp.push(this._member[i]);
+        }
+        for (var i = 0; i < this._member.length; i++) {
+            var len = i + 1;
+            temp[i].y = ((-this._columnSize.height * (len)) + (2 * len));
+            this._index.push(temp[i].index);
+            if (func)
+                func(this._member[i]);
+            this.addChild(temp[i], 0);
+        }
+    },
+    /*
+     *@param {Graphic.Component.DataGrid.RowData} defineObject
+     */
+    addRow:function (defineObject) {
+        var row = new Graphic.Component.DataGrid.Rows(Graphic.Component.DataGrid.defaultColumnMinWidth, this._columnSize.width, this._columnSize.height);
+        row.__row = defineObject;
+        row.initRows();
+        row.index = this._member.length;
+        this._member.push(row);
+        this.addMembers(row, defineObject);
+    },
+    addGroup:function (GroupName) {
+        if (this._group[name])return;
+        this._group[name] = new Graphic.Component.DataGroup(GroupName);
+    },
+    addMembers:function (target, members) {
+        for (var i = 0; i < members.length; i++) {
+            var group = members[i].type;
+            var member = target[group];
+            this.addMemberToGroup(group, member);
+        }
+    },
+    addMemberToGroup:function (group, member) {
+        if (!this._group[group])this.addGroup(group);
+        this._group[group].addMember(member);
+    },getRows:function(){
+        return this._member;
+    }
+});
+Graphic.Component.DataGrid.RowData = cc.Class.extend({
+    type:null,
+    label:null,
+    width:null,
+    ctor:function (Type, Label, Width) {
+        this.type = Type;
+        this.label = Label;
+        this.width = Width;
+    }
+});
+Graphic.Component.DataGrid.Rows = Graphic.Sprite.extend({
+    _minWidth:0,
+    _maxWidth:0,
+    _def_height:0,
+    __row:null,
+    _deviation:0,
+    index:null,
+    ctor:function (minWidth, maxWidth, height) {
+        this._super();
+        this._def_height = height;
+        if (!height) {
+            height = this._def_height = Graphic.Component.DataGrid.defaultColumnHeight;
+        }
+        this.__row = [];
+        this._maxWidth = maxWidth;
+        this._minWidth = minWidth;
+        this.addEventListener(Graphic.MouseEvent.MOUSE_MOVE, function (evt) {
+        });
+    },
+    addRow:function (label, width, isLast) {
+        if (!width)width = this._minWidth;
+        this.__row.push({label:label, width:width});
+        if (!isLast) {
+            return;
+        } else {
+            this.initRows();
+            //this.__row = [];
+        }
+    },
+    initRows:function () {
+        this._deviation = this.__row.length * 2;
+        var preRow;
+        for (var i = 0; i < this.__row.length; i++) {
+            width = this.__row[i].width;
+            label = this.__row[i].label;
+            var row = new Graphic.Component.DataGrid.Row(label, this._widthCalc(width), this._def_height);
+            row.inColumnWidth = width;
+            row.x = (!preRow) ? 0 : (preRow.x + preRow.width) - 2;
+            this[this.__row[i].type] = row;
+            this.addChild(row, 0);
+            preRow = row;
+        }
+
+    },
+    getRows:function () {
+        return this._rows;
+    },
+    _widthCalc:function (value) {
+        return Math.floor(value / 100 * (this._maxWidth + this._deviation - 2));
+    }
+});
+Graphic.Component.DataGrid.Row = Graphic.Component.SimpleButton.extend({
+    inColumnWidth:0,
+    label:null,
+    index:null,
+    indexInGroup:null,
+    ctor:function (label, width, height) {
+        this._super(width, height, Graphic.Component.SimpleButton.General);
+        if (!label)label = "";
+        this.setText(label);
+    },
+    setText:function (label) {
+        this._super(label);
+        this.label = label;
+    }
+});
+Graphic.Component.DataGrid.defaultWidth = 314;
+Graphic.Component.DataGrid.defaultHeight = 314;
+Graphic.Component.DataGrid.defaultColumnMinWidth = 20;
+Graphic.Component.DataGrid.defaultColumnMaxWidth = 50;
+Graphic.Component.DataGrid.defaultColumnWidth = Graphic.Component.DataGrid.defaultWidth;
+Graphic.Component.DataGrid.defaultColumnHeight = 32;
\ No newline at end of file
Index: Graphic/EventHandler/include.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/EventHandler/include.js	(revision )
+++ Graphic/EventHandler/include.js	(revision )
@@ -0,0 +1,14 @@
+/**
+ * Created with JetBrains WebStorm.
+ * User: Locke
+ * Date: 2012/6/26
+ * Time: 上午 9:41
+ * To change this template use File | Settings | File Templates.
+ */
+var Graphic = Graphic = Graphic || {};
+Graphic.lib_path = Graphic.lib_path || "";
+Graphic.EventHandler = Graphic.lib_path + "Graphic/EventHandler/";
+include(Graphic.EventHandler + 'Event.js');
+include(Graphic.EventHandler + 'MouseEvent.js');
+include(Graphic.EventHandler + 'ButtonEvent.js');
+include(Graphic.EventHandler + 'ScrollEvent.js');
\ No newline at end of file
Index: ButtonTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ButtonTest.js	(revision )
+++ ButtonTest.js	(revision )
@@ -0,0 +1,191 @@
+include('Classes/AppDelegate.js');
+//19
+include('Graphic/EventHandler/include.js');
+include('Graphic/Control/include.js');
+include('Graphic/Utils/Utils.js');
+include('Graphic/Effect/Convolution.js');
+include('Graphic/Basic/include.js');
+include('Graphic/com/include.js');
+include('io.js');
+//19
+
+var main;
+var Main = cc.Layer.extend({
+    bIsMouseDown:false,
+    size:null,
+    Center:null,
+    win:null,
+    init:function () {
+        //////////////////////////////
+        // 1. super init first
+        this._super();
+        this.setIsTouchEnabled(true);
+        //this._position = this.getPosition();
+        return true;
+    },
+    onEnter:function () {
+        this._super();
+        this.initLayer();
+    },
+    closeCallback:function () {
+        history.go(-1);
+    },
+    update:null
+});
+//Main.bIsMouseDown = null;
+Main.prototype.initLayer = function () {
+    var size = this.size = cc.Director.sharedDirector().getWinSize();
+    var back = cc.LayerColor.create(cc.ccc4(0, 0, 0, 128), size.width, size.height);
+    var x = size.width / 4;
+    var lazyLayer = new cc.LazyLayer();
+    this.addChild(lazyLayer);
+    lazyLayer.addChild(back);
+    for (var i = 0; i < 10; i++) {
+        var button = new Graphic.Component.Button("Resources/Button0" + i + "_1.png");
+        button.setPosition(cc.ccp(x - button.width / 2, size.height / 2 - button.height / 2));
+        button.setMoveEffect(Graphic.Component.Button.MoveEffect.AlphaInverse);
+        lazyLayer.addChild(button);
+        x += button.width;
+    }
+
+    /*
+     var sprite = new Graphic.Sprite();
+     var pic = new Graphic.Sprite("Resources/cocos64.png");
+     var down = new Graphic.Sprite();
+     var up = new Graphic.Sprite();
+
+     var texture = Graphic.Utils.TextureToImageData(pic.getTexture());
+     var d = Graphic.Effect.Convolution(cc.renderContext,texture,Graphic.Effect.vBevel,254);
+     var u = Graphic.Effect.Convolution(cc.renderContext,texture,Graphic.Effect.Bevel,254);
+     up.initWithTexture(Graphic.Utils.ImageDatasToTexture(u),cc.RectMake(0,0,pic.getContentSize().width,pic.getContentSize().height));
+     down.initWithTexture(Graphic.Utils.ImageDatasToTexture(d),cc.RectMake(0,0,pic.getContentSize().width,pic.getContentSize().height));
+     sprite.setPosition(cc.ccp(size.width / 2, size.height / 2));
+     sprite.addChild(up);
+     sprite.addChild(down);
+
+     sprite.addEventListener(Graphic.MouseEvent.MOUSE_DOWN, button);
+     sprite.addEventListener(Graphic.MouseEvent.MOUSE_UP, button);
+     //sprite.addEventListener(Graphic.MouseEvent.MOUSE_OVER, move);
+     //sprite.addEventListener(Graphic.MouseEvent.MOUSE_OUT, move);
+     sprite.dispatchEvent(Graphic.MouseEvent.MOUSE_UP);
+     this.addChild(sprite);
+     var color =new Graphic.ColorRect(cc.ccc4(11,128,128, 128));
+     color.setPosition(cc.ccp(size.width/2, size.height/2));
+     color.setContentSize(cc.SizeMake(30, 30));
+     color.setAnchorPoint(cc.ccp(-0.05, 1.05));
+     var sprite = new Graphic.Sprite();
+     var up = new Graphic.Sprite();
+     var down = new Graphic.Sprite();
+     var texture = Graphic.Utils.SpriteToImageData(color) ;
+     var utexture= Graphic.Effect.Convolution(cc.renderContext,texture,Graphic.Effect.Bevel,0);
+     var dtexture= Graphic.Effect.Convolution(cc.renderContext,utexture,Graphic.Effect.vBevel,0);
+     delete texture;
+     //texture= Graphic.Effect.Convolution(cc.renderContext,texture,Graphic.Effect.vBevel,0);
+     up.initWithTexture(Graphic.Utils.ImageDatasToTexture(utexture), cc.RectMake(0,0,30,30))
+     up.setScaleX(2);
+     sprite.setPosition(cc.ccp(size.width / 2+60, size.height / 2));
+     down.initWithTexture(Graphic.Utils.ImageDatasToTexture(dtexture), cc.RectMake(0,0,30,30))
+     down.setScaleX(2);
+     sprite.addChild(up);
+     sprite.addChild(down);
+
+     sprite.addEventListener(Graphic.MouseEvent.MOUSE_DOWN, button);
+     sprite.addEventListener(Graphic.MouseEvent.MOUSE_UP, button);
+     //sprite.addEventListener(Graphic.MouseEvent.MOUSE_OVER, move);
+     //sprite.addEventListener(Graphic.MouseEvent.MOUSE_OUT, move);
+     sprite.dispatchEvent(Graphic.MouseEvent.MOUSE_UP);
+     this.addChild(sprite);
+     color.setAnchorPoint(cc.ccp(0.5, 0.5));
+     this.addChild(color);
+     /*
+     var text = new Graphic.Component.TextInputBox();
+     text.setPosition(cc.ccp(size.width/2, size.height/2));
+     this.addChild(text);
+
+     /*
+     var rect = new Graphic.Sprite();
+     rect.load("src/image/rect.png");
+     var rect_inside = new Graphic.Sprite();
+     rect_inside.load("src/image/rect_inside.png");
+     var tWin = this.win = new SWindow();
+     //tWin.init();
+     tWin.addToBackground(rect_inside);
+     tWin.addToForeground(rect);
+     // When five parameters
+     //textField.setPosition(cc.ccp(50, 0));
+     rect_inside.setScaleX(1.15);
+     rect_inside.setScaleY(1.12);
+     rect_inside.y += 6;
+     tWin.setPosition(cc.ccp(size.width / 2, size.height / 2));
+     tWin.setScale(2);
+     // tWin.addEventListener(Graphic.MouseEvent.MOUSE_CLICK, moveLU);
+
+     this.addChild(tWin);
+
+     var speed = 0.1;
+     var action = [cc.MoveTo.create(speed, cc.ccp(tWin.width / 2, size.height - tWin.height / 2)),
+     cc.MoveTo.create(speed, cc.ccp(size.width - tWin.width / 2, size.height - tWin.height / 2)),
+     cc.MoveTo.create(speed, cc.ccp(size.width - tWin.width / 2, size.height - tWin.height)),
+     cc.MoveTo.create(speed, cc.ccp(tWin.width / 2, size.height - tWin.height))
+     ];
+
+     var scale = [cc.ScaleTo.create(speed, -2, -2), cc.ScaleTo.create(speed, 2, -2), cc.ScaleTo.create(speed, 2, 2), cc.ScaleTo.create(speed, -2, 2)];
+     tWin.scale = scale;
+     tWin.action = action;
+     tWin.setScale(.5);
+     tWin.runAction(cc.ScaleTo.create(0.5, 2, 2));
+     tWin.actionIndex = 0;
+     cc.Director.sharedDirector().getScheduler().scheduleUpdateForTarget(this, 0, false);
+     */
+};
+var button = function (evt) {
+    var sprite = evt.target;
+
+    var bIsMouseDown = (evt.type == Graphic.MouseEvent.MOUSE_DOWN);
+    sprite.getChildAt(1).setVisible(bIsMouseDown);
+    sprite.getChildAt(0).setVisible(!bIsMouseDown);
+};
+var move = function (evt) {
+    var sprite = evt.target;
+
+    var bIsMouseDown = (evt.type == Graphic.MouseEvent.MOUSE_OVER);
+    sprite.setOpacity(bIsMouseDown ? 192 : 255);
+};
+var moveLU = function (evt) {
+    var tWin = evt.target;
+    var size = cc.Director.sharedDirector().getWinSize();
+    tWin.runAction(tWin.action[tWin.actionIndex]);
+    tWin.runAction(tWin.scale[tWin.actionIndex]);
+    tWin.actionIndex = (tWin.actionIndex + 1) % tWin.action.length;
+};
+Main.prototype.update = function () {
+//   this.win.x--;//position();
+
+};
+Main.scene = function () {
+    // 'scene' is an autorelease object
+    var scene = cc.Scene.create();
+    // 'layer' is an autorelease object
+    var layer = this.node();
+    scene.addChild(layer);
+    return scene;
+};
+
+// implement the "static node()" method manually
+Main.node = function () {
+    var pRet = new Main();
+
+    // Init the Main display layer.
+    if (pRet && pRet.init()) {
+        main = pRet;
+        return pRet;
+    }
+
+    return null;
+};
+Main.sharedLayer = function () {
+    if (main != null)
+        return main;
+    else
+        return Main.node();
+};
Index: Graphic/Class.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/Class.js	(revision )
+++ Graphic/Class.js	(revision )
@@ -0,0 +1,99 @@
+/**
+ * @author cocos2d-x
+ */
+/****************************************************************************
+ Copyright (c) 2010-2012 cocos2d-x.org
+ Copyright (c) 2008-2010 Ricardo Quesada
+ Copyright (c) 2011      Zynga Inc.
+
+ http://www.cocos2d-x.org
+
+ Permission is hereby granted, free of charge, to any person obtaining a copy
+ of this software and associated documentation files (the "Software"), to deal
+ in the Software without restriction, including without limitation the rights
+ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ copies of the Software, and to permit persons to whom the Software is
+ furnished to do so, subject to the following conditions:
+
+ The above copyright notice and this permission notice shall be included in
+ all copies or substantial portions of the Software.
+
+ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ THE SOFTWARE.
+ ****************************************************************************/
+/* Simple JavaScript Inheritance
+* By John Resig http://ejohn.org/
+* MIT Licensed.
+*/
+// Inspired by base2 and Prototype
+
+(function() {
+    var initializing = false, fnTest = /xyz/.test(function() { xyz;
+    }) ? /\b_super\b/ : /.*/;
+
+    // The base Class implementation (does nothing)
+    var Class = function() {
+    };
+
+    // Create a new Class that inherits from this Class
+    Class.extend = function(prop) {
+        var _super = this.prototype;
+
+        // Instantiate a base Class (but only create the instance,
+        // don't run the init constructor)
+        initializing = true;
+        var prototype = new this();
+        initializing = false;
+
+        // Copy the properties over onto the new prototype
+        for(var name in prop) {
+            // Check if we're overwriting an existing function
+            prototype[name] = typeof prop[name] == "function" && typeof _super[name] == "function" && fnTest.test(prop[name]) ? (function(name, fn) {
+                return function() {
+                    var tmp = this._super;
+
+                    // Add a new ._super() method that is the same method
+                    // but on the super-Class
+                    this._super = _super[name];
+
+                    // The method only need to be bound temporarily, so we
+                    // remove it when we're done executing
+                    var ret = fn.apply(this, arguments);
+                    this._super = tmp;
+
+                    return ret;
+                };
+            })(name, prop[name]) : prop[name];
+        }
+
+        // The dummy Class constructor
+        function Class() {
+            // All construction is actually done in the init method
+            if(!initializing && this.ctor)
+                this.ctor.apply(this, arguments);
+        }
+
+        // Populate our constructed prototype object
+        Class.prototype = prototype;
+
+        // Enforce the constructor to be what we expect
+        Class.prototype.constructor = Class;
+
+        // And make this Class extendable
+        Class.extend = arguments.callee;
+
+        //add implementation method
+        Class.implement = function(prop) {
+            for(var name in prop) {
+                prototype[name] = prop[name];
+            }
+        };
+        return Class;
+    };
+})();
+
Index: Graphic/Basic/include.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/Basic/include.js	(revision )
+++ Graphic/Basic/include.js	(revision )
@@ -0,0 +1,12 @@
+/**
+ * Created with JetBrains WebStorm.
+ * User: Locke
+ * Date: 2012/6/26
+ * Time: 上午 9:41
+ * To change this template use File | Settings | File Templates.
+ */
+var Graphic = Graphic = Graphic || {};
+Graphic.lib_path = Graphic.lib_path || "";
+Graphic.Basic = Graphic.lib_path + "Graphic/Basic/";
+include(Graphic.Basic + 'Sprite.js');
+include(Graphic.Basic + 'ColorSprite.js');
Index: Graphic/com/ScrollBar.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/com/ScrollBar.js	(revision )
+++ Graphic/com/ScrollBar.js	(revision )
@@ -0,0 +1,160 @@
+/**
+ * Created with JetBrains WebStorm.
+ * User: Locke
+ * Date: 2012/6/27
+ * Time: 下午 5:03
+ * To change this template use File | Settings | File Templates.
+ */
+var Graphic = Graphic = Graphic || {};
+Graphic.Component = Graphic.Component||{};
+Graphic.Component.ScrollBar = Graphic.Sprite.extend({
+    _upArrow:null,
+    _downArrow:null,
+    _track:null,
+    _thumb:null,
+    _thumb_maxSize:null,
+    _thumb_minSize:null,
+    _thumb_currentSize:null,
+    _thumb_top:null,
+    _thumb_bottom:null,
+    _scroll:0,
+    _mainSize:null,
+    _running:false,
+    _lastPercent:0,
+    _used:false,
+    _drag_pos:null,
+    ctor:function (width, height) {
+        this._super();
+        this._mainSize = cc.SizeMake(width, height);
+        var texture = Graphic.Utils.GradientTexture(cc.SizeMake(width - 2, height), cc.ccc4(192, 192, 192, 192));
+
+        this._drag_pos = cc.PointZero();
+        this._track = new Graphic.Sprite();
+        this._track.initWithTexture(texture);
+        this.addChild(this._track);
+
+        var up = "▲", down = "▼";
+        this._upArrow = new Graphic.Component.SimpleButton(width, width, Graphic.Component.SimpleButton.Default);
+        this._upArrow.setPosition(cc.ccp(-1, height - 1));
+        this._upArrow.setText(up);
+        this._upArrow.addEventListener(Graphic.ButtonEvent.BUTTON_DOWN, Graphic.Component.ScrollBar.MOVE_UP);
+        this._upArrow.addEventListener(Graphic.MouseEvent.MOUSE_UP, Graphic.Component.ScrollBar.REMOVE);
+        this._upArrow.addEventListener(Graphic.MouseEvent.MOUSE_OUT, Graphic.Component.ScrollBar.REMOVE);
+
+        this._downArrow = new Graphic.Component.SimpleButton(width, width, Graphic.Component.SimpleButton.Default);
+        this._downArrow.setPosition(cc.ccp(-1, -(width) + 1));
+        this._downArrow.setText(down);
+        this._downArrow.addEventListener(Graphic.ButtonEvent.BUTTON_DOWN, Graphic.Component.ScrollBar.MOVE_DOWN);
+        this._downArrow.addEventListener(Graphic.MouseEvent.MOUSE_OUT, Graphic.Component.ScrollBar.REMOVE);
+        this._downArrow.addEventListener(Graphic.MouseEvent.MOUSE_UP, Graphic.Component.ScrollBar.REMOVE);
+
+        this._thumb_currentSize = height / 10;
+        this._thumb_minSize = height / 10;
+        this._thumb_maxSize = height;
+        this._thumb_top = 0;
+        this._thumb_bottom = height - this._thumb_currentSize + 2;
+        this._thumb = new Graphic.Component.SimpleButton(width, this._thumb_currentSize, Graphic.Component.SimpleButton.Default);
+        this._thumb.setPosition(cc.ccp(-1, this._thumb_bottom));
+
+        this._thumb.addEventListener(Graphic.ButtonEvent.BUTTON_DOWN, Graphic.Component.ScrollBar.DRAG);
+        this._thumb.addEventListener(Graphic.MouseEvent.MOUSE_OUT, Graphic.Component.ScrollBar.DROP);
+        this._thumb.addEventListener(Graphic.ButtonEvent.BUTTON_UP, Graphic.Component.ScrollBar.DROP);
+
+        //this._track.addEventListener(Graphic.MouseEvent.MOUSE_DOWN,Graphic.Component.ScrollBar.TRACK);
+        this._track.addChild(this._upArrow);
+        this._track.addChild(this._thumb);
+        this._track.addChild(this._downArrow);
+    },
+    setThumbSize:function (percent) {
+        this._thumb_currentSize = this._thumb_minSize + (((this._thumb_maxSize - this._thumb_minSize) / 100) * percent);
+        this._thumb_bottom = this._thumb_maxSize - this._thumb_currentSize + 2;
+        this._thumb.initSize(this._mainSize.width, this._thumb_currentSize);
+        this._thumb.setPosition(cc.ccp(-1, this._thumb_bottom));
+    },
+    setScroll_Up:function (deviation) {
+        var move = this._thumb.y + deviation;
+        if (move < this._thumb_bottom)
+            this._thumb.y = move;
+        else if (this._thumb.y != this._thumb_bottom)
+            this._thumb.y = this._thumb_bottom;
+        else return;
+        var dev = this.getScrollProgress() - this._lastPercent;
+        if (Math.abs(dev) >= 1) {
+            this._lastPercent = this.getScrollProgress();
+            this.dispatchEvent(Graphic.ScrollEvent.SCROLL);
+            this.dispatchEvent(Graphic.ScrollEvent.SCROLL_UP);
+
+        }
+    },
+    setScroll_Down:function (deviation) {
+        var move = this._thumb.y - deviation;
+        if (move > this._thumb_top)
+            this._thumb.y = move;
+        else if (this._thumb.y != this._thumb_top)
+            this._thumb.y = this._thumb_top;
+        else return;
+        var dev = this.getScrollProgress() - this._lastPercent;
+        if (Math.abs(dev) >= 1) {
+            this._lastPercent = this.getScrollProgress();
+            this.dispatchEvent(Graphic.ScrollEvent.SCROLL);
+            this.dispatchEvent(Graphic.ScrollEvent.SCROLL_DOWN);
+        }
+    },
+    getScrollProgress:function () {
+        var percent = Math.floor((this._thumb_bottom - this._thumb.y) / this._thumb_bottom * 100);
+        return percent > 100 ? 100 : percent;
+    },
+    update:function () {
+        switch (this._scroll) {
+            case 1:
+                this.setScroll_Up(1);
+                break;
+            case 2:
+                this.setScroll_Down(1);
+                break;
+        }
+    }
+});
+Graphic.Component.ScrollBar.DRAG = function (evt) {
+    var scroll_bar = evt.target.parent.parent;
+    if (!scroll_bar._used) {
+        scroll_bar._used = true;
+        scroll_bar._drag_pos = evt.target._m_tBeginPos;
+        return;
+    }
+    if (scroll_bar._drag_pos.y < evt.target._m_tBeginPos.y) {
+        scroll_bar.setScroll_Up(Math.abs(scroll_bar._drag_pos.y - evt.target._m_tBeginPos.y));
+    } else if (scroll_bar._drag_pos.y > evt.target._m_tBeginPos.y) {
+        scroll_bar.setScroll_Down(Math.abs(scroll_bar._drag_pos.y - evt.target._m_tBeginPos.y));
+    }
+    scroll_bar._drag_pos = evt.target._m_tBeginPos;
+};
+Graphic.Component.ScrollBar.DROP = function (evt) {
+    var scroll_bar = evt.target.parent.parent;
+    scroll_bar._used = false;
+};
+Graphic.Component.ScrollBar.MOVE_UP = function (evt) {
+    var scroll_bar = evt.target.parent.parent;
+    if (!scroll_bar._running) {
+        scroll_bar._running = true;
+        cc.Director.sharedDirector().getScheduler().scheduleUpdateForTarget(scroll_bar, 1, false);
+    }
+    scroll_bar._scroll = 1;
+};
+Graphic.Component.ScrollBar.MOVE_DOWN = function (evt) {
+    var scroll_bar = evt.target.parent.parent;
+    if (!scroll_bar._running) {
+        scroll_bar._running = true;
+        cc.Director.sharedDirector().getScheduler().scheduleUpdateForTarget(scroll_bar, 1, false);
+    }
+    scroll_bar._scroll = 2;
+};
+Graphic.Component.ScrollBar.REMOVE = function (evt) {
+    var scroll_bar = evt.target.parent.parent;
+    if (scroll_bar._running) {
+        scroll_bar._running = false;
+        cc.Director.sharedDirector().getScheduler().unscheduleUpdateForTarget(scroll_bar);
+    }
+    scroll_bar._used = false;
+    scroll_bar._scroll = 0;
+};
\ No newline at end of file
Index: io.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- io.js	(revision )
+++ io.js	(revision )
@@ -0,0 +1,40 @@
+/**
+ * Created with JetBrains WebStorm.
+ * User: Locke
+ * Date: 2012/6/15
+ * Time: 下午 3:18
+ * To change this template use File | Settings | File Templates.
+ */
+var IO = IO = IO || {};
+IO.KeyCode = "";
+IO.KeyCodeToString = "";
+if (navigator.appName == 'Netscape') {
+    document.captureEvents(Event.KEYPRESS);
+}
+if (navigator.appName != 'Microsoft Internet Explorer') {
+    //var cav = document.body.getElementsByTagName("canvas")[0];
+    //cav.addEventListener('keypress', onKeyPress);
+    //cav.focus();  // 获得焦点之后，才能够对键盘事件进行捕获
+}
+function InternetExplore(e) {
+
+    var key = e.charCode;
+    var code = "[ " + String.fromCharCode(e.charCode) + " ]";
+    cc.Log(code);
+}
+function onKeyPress(e) {
+    cc.Log(1);
+    try {
+        if (e.keyCode || e.which) {
+            var code = IO.KeyCode = (e.keyCode == 0) ? e.which : e.keyCode;
+            var key = IO.KeyCodeToString = String.fromCharCode(code);
+        }else
+        {
+            IO.KeyCodeToString =e.which;
+        }
+        cc.Log(IO.KeyCodeToString+" , "+e.which +" , "+e.keyCode);
+    } catch (error) {
+        cc.Log(error);
+    }
+
+}
Index: Graphic/Basic/ColorSprite.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/Basic/ColorSprite.js	(revision )
+++ Graphic/Basic/ColorSprite.js	(revision )
@@ -0,0 +1,202 @@
+/**
+ * Created with JetBrains WebStorm.
+ * User: Locke
+ * Date: 2012/6/19
+ * Time: 上午 10:57
+ * To change this template use File | Settings | File Templates.
+ */
+var Graphic = Graphic = Graphic || {};
+
+Graphic.ColorSprite = cc.Sprite.extend({
+    _squareVertices:[],
+    _squareColors:[],
+    _opacity:0,
+    _color:new cc.Color3B(255, 255, 255),
+    _blendFunc:new cc.BlendFunc(cc.BLEND_SRC, cc.BLEND_DST),
+
+    /**
+     * Constructor
+     */
+    ctor:function (color) {
+        this._squareVertices = [new cc.Vertex2F(0, 0), new cc.Vertex2F(0, 0), new cc.Vertex2F(0, 0), new cc.Vertex2F(0, 0)];
+        this._squareColors = [new cc.Color4B(0, 0, 0, 1), new cc.Color4B(0, 0, 0, 1), new cc.Color4B(0, 0, 0, 1), new cc.Color4B(0, 0, 0, 1)];
+        this._color = new cc.Color3B(0, 0, 0);
+        this._super();
+        if (color) {
+            this.initWithColor(color);
+        }
+        this.setAnchorPoint(cc.ccp(0.5, 0.5));
+    },
+
+    /**
+     * opacity getter
+     * @return {Number}
+     */
+    getOpacity:function () {
+        return this._opacity;
+    },
+
+    /**
+     * opacity setter
+     * @param {Number} Var a number between 0 and 255, 0 is totally transparent
+     */
+    setOpacity:function (Var) {
+        this._opacity = Var;
+        this._updateColor();
+
+        //this._addDirtyRegionToDirector(this.boundingBoxToWorld());
+        this.setNodeDirty();
+    },
+
+    /**
+     * color getter
+     * @return {cc.Color3B}
+     */
+    getColor:function () {
+        return this._color;
+    },
+
+    /**
+     * color setter
+     * @param {cc.Color3B} Var
+     */
+    setColor:function (Var) {
+        this._color = Var;
+        this._updateColor();
+
+        //this._addDirtyRegionToDirector(this.boundingBoxToWorld());
+        this.setNodeDirty();
+    },
+
+    /**
+     * blendFunc getter
+     * @return {cc.BlendFunc}
+     */
+    getBlendFunc:function () {
+        return this._blendFunc;
+    },
+
+    /**
+     * blendFunc setter
+     * @param {cc.BlendFunc} Var
+     */
+    setBlendFunc:function (Var) {
+        this._blendFunc = Var;
+    },
+
+    /**
+     * @param color
+     * @return {Boolean}
+     */
+    initWithColor:function (color) {
+        this._blendFunc.src = cc.BLEND_SRC;
+        this._blendFunc.dst = cc.BLEND_DST;
+        this._color = new cc.Color3B(color.r, color.g, color.b);
+        this._opacity = color.a;
+
+        for (var i = 0; i < this._squareVertices.length; i++) {
+            this._squareVertices[i].x = 0.0;
+            this._squareVertices[i].y = 0.0;
+        }
+        this._updateColor();
+        return true;
+    },
+
+    /**
+     * override contentSize
+     * @param {cc.Size} size
+     */
+    setContentSize:function (size) {
+        this._squareVertices[1].x = size.width * cc.CONTENT_SCALE_FACTOR();
+        this._squareVertices[2].y = size.height * cc.CONTENT_SCALE_FACTOR();
+        this._squareVertices[3].x = size.width * cc.CONTENT_SCALE_FACTOR();
+        this._squareVertices[3].y = size.height * cc.CONTENT_SCALE_FACTOR();
+        this._super(size);
+    },
+
+    /**
+     * change width and height in Points
+     * @param {Number} w width
+     * @param {Number} h height
+     */
+    changeWidthAndHeight:function (w, h) {
+        this.setContentSize(cc.SizeMake(w, h));
+    },
+
+    /**
+     * change width in Points
+     * @param {Number} w width
+     */
+    changeWidth:function (w) {
+        this.setContentSize(cc.SizeMake(w, this._contentSize.height));
+    },
+
+    /**
+     * change height in Points
+     * @param {Number} h height
+     */
+    changeHeight:function (h) {
+        this.setContentSize(cc.SizeMake(this._contentSize.width, h));
+    },
+    _updateColor:function () {
+        for (var i = 0; i < 4; i++) {
+            this._squareColors[i].r = Math.round(this._color.r);
+            this._squareColors[i].g = Math.round(this._color.g);
+            this._squareColors[i].b = Math.round(this._color.b);
+            this._squareColors[i].a = Math.round(this._opacity);
+        }
+    },
+
+    setIsOpacityModifyRGB:function (value) {
+    },
+    getIsOpacityModifyRGB:function () {
+        return false;
+    },
+    draw:function (ctx) {
+
+    }
+});
+Graphic.ColorRect = Graphic.ColorSprite.extend({
+    lineWidth:5,
+    lineColor:cc.ccc4(0, 0, 0, 255),
+    ctor:function (color) {
+        this._super(color);
+    },
+    draw:function (ctx) {
+        var context = ctx || cc.renderContext;
+
+        if (cc.renderContextType == cc.CANVAS) {
+            //context.globalAlpha = this.getOpacity() / 255;
+            context.globalAlpha = this._opacity / 255;
+            if (this._flipX) {
+                context.scale(-1, 1);
+            }
+            if (this._flipY) {
+                context.scale(1, -1);
+            }
+            var offsetPixels = this._offsetPositionInPixels;
+            var pos = new cc.Point(0 | ( -this._anchorPointInPixels.x + offsetPixels.x), 0 | ( -this._anchorPointInPixels.y + offsetPixels.y));
+
+            var tWidth = this.getContentSize().width;
+            var tHeight = this.getContentSize().height;
+            var tGradient = context.createLinearGradient(-this.getAnchorPointInPixels().x, this.getAnchorPointInPixels().y,
+                -this.getAnchorPointInPixels().x + tWidth, -(this.getAnchorPointInPixels().y + tHeight));
+
+            tGradient.addColorStop(0, "rgba(" + this._squareColors[0].r + "," + this._squareColors[0].g + ","
+                + this._squareColors[0].b + "," + this._squareColors[0].a / 255 + ")");
+            tGradient.addColorStop(1, "rgba(" + this._squareColors[3].r + "," + this._squareColors[3].g + ","
+                + this._squareColors[3].b + "," + this._squareColors[3].a / 255 + ")");
+
+            context.fillStyle = tGradient;
+            context.fillRect(-this.getAnchorPointInPixels().x, this.getAnchorPointInPixels().y, tWidth, -tHeight);
+            var s = this._contentSize;
+            var vertices = [cc.ccp(-this._anchorPointInPixels.x + offsetPixels.x, this.getAnchorPointInPixels().y)
+                , cc.ccp(-this.getAnchorPointInPixels().x + tWidth, this.getAnchorPointInPixels().y)
+                , cc.ccp(-this.getAnchorPointInPixels().x + tWidth, -(this.getAnchorPointInPixels().y ))
+                , cc.ccp(-this._anchorPointInPixels.x + offsetPixels.x, -(this.getAnchorPointInPixels().y))];
+            Graphic.Utils.DrawPoly(context, vertices, this.lineWidth, this.lineColor, 4, true);
+
+        }
+        this._super();
+    }
+});
Index: lib/SimpleAudioEngine.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/SimpleAudioEngine.js	(revision )
+++ lib/SimpleAudioEngine.js	(revision )
@@ -0,0 +1,494 @@
+/****************************************************************************
+ Copyright (c) 2010-2012 cocos2d-x.org
+ Copyright (c) 2008-2010 Ricardo Quesada
+ Copyright (c) 2011      Zynga Inc.
+
+ http://www.cocos2d-x.org
+
+ Permission is hereby granted, free of charge, to any person obtaining a copy
+ of this software and associated documentation files (the "Software"), to deal
+ in the Software without restriction, including without limitation the rights
+ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ copies of the Software, and to permit persons to whom the Software is
+ furnished to do so, subject to the following conditions:
+
+ The above copyright notice and this permission notice shall be included in
+ all copies or substantial portions of the Software.
+
+ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ THE SOFTWARE.
+ ****************************************************************************/
+
+/**
+ * Whether the sound on or not
+ * @type Boolean
+ */
+cc.sound = true;
+
+/**
+ * Support audio format
+ * @type Boolean
+ */
+cc.capabilities = {
+    mp3:false,
+    ogg:false,
+    wav:false
+};
+
+/**
+ * Offer a VERY simple interface to play background music & sound effect.
+ * @class
+ * @extends   cc.Class
+ */
+cc.AudioManager = cc.Class.extend(/** @lends cc.AudioManager# */{
+    _initialized:false,
+    _supportedFormat:[ "mp3", "ogg", "wav" ],
+    _requestedFormat:null,
+    _sound_enable:true,
+    _audioList:{},
+    _activeAudioExt:-1,
+    _bgmList:{},
+    _isBgmPlaying:false,
+    _playingBgm:null,
+    _effectsVolume:1,
+    /**
+    * Constructor
+    */
+    ctor:function () {
+        if (this._initialized)
+            return;
+
+        // init audio
+        var au = document.createElement('audio');
+        if (au.canPlayType) {
+            cc.capabilities.mp3 = ("no" != au.canPlayType("audio/mpeg"))
+                && ("" != au.canPlayType("audio/mpeg"));
+
+            cc.capabilities.ogg = ("no" != au.canPlayType('audio/ogg; codecs="vorbis"'))
+                && ("" != au.canPlayType('audio/ogg; codecs="vorbis"'));
+
+            cc.capabilities.wav = ("no" != au.canPlayType('audio/wav; codecs="1"'))
+                && ("" != au.canPlayType('audio/wav; codecs="1"'));
+
+            // enable sound if any of the audio format is supported
+            cc.sound = cc.capabilities.mp3 || cc.capabilities.ogg || cc.capabilities.wav;
+        }
+        this._initialized = true;
+    },
+    /**
+     * Initialize sound type
+     * @param {String} audioType
+     * @return {Boolean}
+     * @example
+     * //example
+     * cc.AudioManager.sharedEngine().init("mp3,ogg");
+     */
+    init:function (audioType) {
+        if (audioType) {
+            this._requestedFormat = new String(audioType)
+        }
+        else {
+            // if no param is given to init we use mp3 by default
+            this._requestedFormat = new String("mp3");
+        }
+
+        // detect the prefered audio format
+        this._activeAudioExt = this._getSupportedAudioFormat();
+        return this._sound_enable;
+    },
+    _getSupportedAudioFormat:function () {
+        var extIdx = 0;
+        // check for sound support by the browser
+        if (!cc.sound) {
+            this._sound_enable = false;
+            return;
+        }
+
+        // check for MP3
+        if ((this._requestedFormat.search(/mp3/i) != -1) && cc.capabilities.mp3) {
+            return this._supportedFormat[extIdx];
+        }
+
+        // check for OGG/Vorbis
+        if ((this._requestedFormat.search(/ogg/i) != -1) && cc.capabilities.ogg) {
+            return this._supportedFormat[++extIdx];
+        }
+
+        // check for WAV
+        if ((this._requestedFormat.search(/wav/i) != -1) && cc.capabilities.wav) {
+            return this._supportedFormat[++extIdx];
+        }
+
+        // deactivate sound
+        this._sound_enable = false;
+
+        return -1;
+    },
+    /**
+     * Preload background music resource.<br />
+     * This method is called when cc.Loader preload  resources.
+     * @param {String} path The path of the background music file without filename extension.
+     */
+    preloadBackgroundMusic:function (path) {
+        if (this._sound_enable) {
+            if (this._activeAudioExt == -1) return;
+            var soundPath = path + "." + this._activeAudioExt;
+            var soundCache = new Audio(soundPath);
+            soundCache.preload = 'auto';
+
+            soundCache.addEventListener('canplaythrough', function (e) {
+                this.removeEventListener('canplaythrough', arguments.callee, false);
+            }, false);
+            soundCache.addEventListener("error", function (e) {
+                cc.Loader.shareLoader().onResLoadingErr();
+            }, false);
+            soundCache.addEventListener("playing", function (e) {
+                cc.sharedEngine._isBgmPlaying = true;
+            }, false);
+            soundCache.addEventListener("pause", function (e) {
+                cc.sharedEngine._isBgmPlaying = false;
+            }, false);
+
+            // load it
+            soundCache.load();
+
+            this._bgmList[path] = soundCache
+        }
+        cc.Loader.shareLoader().onResLoaded();
+    },
+    /**
+     * Play background music.
+     * @param {String} path The path of the background music file without filename extension.
+     * @param {Boolean} loop Whether the background music loop or not.
+     * @example
+     * //example
+     * cc.AudioManager.sharedEngine().playBackgroundMusic(path, false);
+     */
+    playBackgroundMusic:function (path, loop) {
+        if (this._bgmList[this._playingBgm]) {
+            this._bgmList[this._playingBgm].pause();
+        }
+        this._playingBgm = path;
+        if (this._bgmList[this._playingBgm]) {
+            this._bgmList[this._playingBgm].loop = loop || false;
+            this._bgmList[this._playingBgm].play();
+        }
+    },
+    /**
+     * Stop playing background music.
+     * @param {Boolean} releaseData If release the background music data or not.As default value is false.
+     * @example
+     * //example
+     * cc.AudioManager.sharedEngine().stopBackgroundMusic();
+     */
+    stopBackgroundMusic:function (releaseData) {
+        if (this._bgmList[this._playingBgm]) {
+            this._bgmList[this._playingBgm].pause();
+            this._bgmList[this._playingBgm].currentTime = 0;
+            if (releaseData && this._bgmList.hasOwnProperty(this._playingBgm)) {
+                delete this._bgmList[this._playingBgm];
+            }
+        }
+    },
+    /**
+     * Pause playing background music.
+     * @example
+     * //example
+     * cc.AudioManager.sharedEngine().pauseBackgroundMusic();
+     */
+    pauseBackgroundMusic:function () {
+        if (this._bgmList[this._playingBgm]) {
+            this._bgmList[this._playingBgm].pause();
+        }
+    },
+    /**
+     * Resume playing background music.
+     * @example
+     * //example
+     * cc.AudioManager.sharedEngine().resumeBackgroundMusic();
+     */
+    resumeBackgroundMusic:function () {
+        if (this._bgmList[this._playingBgm]) {
+            this._bgmList[this._playingBgm].play();
+        }
+    },
+
+    /**
+     * Rewind playing background music.
+     * @example
+     * //example
+     * cc.AudioManager.sharedEngine().rewindBackgroundMusic();
+     */
+    rewindBackgroundMusic:function () {
+        if (this._bgmList[this._playingBgm]) {
+            this._bgmList[this._playingBgm].currentTime = 0;
+            this._bgmList[this._playingBgm].play();
+        }
+    },
+    willPlayBackgroundMusic:function () {
+        return false;
+    },
+
+    /**
+     * Whether the background music is playing.
+     * @return {Boolean} If is playing return true,or return false.
+     * @example
+     * //example
+     *  if (cc.AudioManager.sharedEngine().isBackgroundMusicPlaying()) {
+     *      cc.Log("background music is playing");
+     *  }
+     *  else {
+     *      cc.Log("background music is not playing");
+     *  }
+     */
+    isBackgroundMusicPlaying:function () {
+        return cc.sharedEngine._isBgmPlaying;
+    },
+
+    /**
+     * The volume of the background music max value is 1.0,the min value is 0.0 .
+     * @return {Number}
+     * @example
+     * //example
+     * var volume = cc.AudioManager.sharedEngine().getBackgroundMusicVolume();
+     */
+    getBackgroundMusicVolume:function () {
+        if (this._bgmList[this._playingBgm]) {
+            return this._bgmList[this._playingBgm].volume;
+        }
+        else {
+            return 0;
+        }
+    },
+
+    /**
+     * Set the volume of background music.
+     * @param {Number} volume Volume must be in 0.0~1.0 .
+     * @example
+     * //example
+     * cc.AudioManager.sharedEngine().setBackgroundMusicVolume(0.5);
+     */
+    setBackgroundMusicVolume:function (volume) {
+        if (this._bgmList[this._playingBgm]) {
+            if (volume > 1) {
+                this._bgmList[this._playingBgm].volume = 1;
+            }
+            else if (volume < 0) {
+                this._bgmList[this._playingBgm].volume = 0;
+            }
+            else {
+                this._bgmList[this._playingBgm].volume = volume;
+            }
+        }
+    },
+
+    /**
+     *The volume of the effects max value is 1.0,the min value is 0.0 .
+     * @return {Number}
+     * @example
+     * //example
+     * var effectVolume = cc.AudioManager.sharedEngine().getEffectsVolume();
+     */
+    getEffectsVolume:function () {
+        return this._effectsVolume;
+    },
+
+    /**
+     * Set the volume of sound effecs.
+     * @param {Number} volume Volume must be in 0.0~1.0 .
+     * @example
+     * //example
+     * cc.AudioManager.sharedEngine().setEffectsVolume(0.5);
+     */
+    setEffectsVolume:function (volume) {
+        if (volume > 1) {
+            this._effectsVolume = 1;
+        }
+        else if (volume < 0) {
+            this._effectsVolume = 0;
+        }
+        else {
+            this._effectsVolume = volume;
+        }
+        if (this._audioList) {
+            for (var i in this._audioList) {
+                this._audioList[i].volume = this._effectsVolume;
+            }
+        }
+    },
+
+    /**
+     * Play sound effect.
+     * @param {String} path The path of the sound effect  without filename extension.
+     * @param {Boolean} loop Whether to loop the effect playing, default value is false
+     * @example
+     * //example
+     * var soundId = cc.AudioManager.sharedEngine().playEffect(path);
+     */
+    playEffect:function (path, loop) {
+        var soundCache = this._getEffectList(path);
+        if (soundCache) {
+            soundCache.currentTime = 0;
+            soundCache.loop = loop || false;
+            soundCache.play();
+        }
+        return path;
+    },
+
+    /**
+     * Pause playing sound effect.
+     * @param {String} path The return value of function playEffect.
+     * @example
+     * //example
+     * cc.AudioManager.sharedEngine().pauseEffect(path);
+     */
+    pauseEffect:function (path) {
+        if (this._audioList[path]) {
+            this._audioList[path].pause();
+        }
+    },
+
+    /**
+     * Pause all playing sound effect.
+     * @example
+     * //example
+     * cc.AudioManager.sharedEngine().pauseAllEffects();
+     */
+    pauseAllEffects:function () {
+        if (this._audioList) {
+            for (var i in this._audioList) {
+                this._audioList[i].pause();
+            }
+        }
+    },
+
+    /**
+     * Resume playing sound effect.
+     * @param {String} path The return value of function playEffect.
+     * @example
+     * //example
+     * cc.AudioManager.sharedEngine().resumeEffect(path);
+     */
+    resumeEffect:function (path) {
+        if (this._audioList[path]) {
+            this._audioList[path].play();
+        }
+    },
+
+    /**
+     * Resume all playing sound effect
+     * @example
+     * //example
+     * cc.AudioManager.sharedEngine().resumeAllEffects();
+     */
+    resumeAllEffects:function () {
+        if (this._audioList) {
+            for (var i in this._audioList) {
+                this._audioList[i].play();
+            }
+        }
+    },
+
+    /**
+     * Stop playing sound effect.
+     * @param {String} path The return value of function playEffect.
+     * @example
+     * //example
+     * cc.AudioManager.sharedEngine().stopEffect(path);
+     */
+    stopEffect:function (path) {
+        if (this._audioList[path]) {
+            this._audioList[path].pause();
+            this._audioList[path].currentTime = 0;
+        }
+    },
+
+    /**
+     * Stop all playing sound effects.
+     * @example
+     * //example
+     * cc.AudioManager.sharedEngine().stopAllEffects();
+     */
+    stopAllEffects:function () {
+        if (this._audioList) {
+            for (var i in this._audioList) {
+                this._audioList[i].pause();
+                this._audioList[i].currentTime = 0;
+            }
+        }
+    },
+
+    /**
+     * Preload sound effect resource.
+     * This method is called when cc.Loader preload  resources.
+     * @param {String} path The path of the sound effect file without filename extension.
+     */
+    preloadEffect:function (path) {
+        if (this._sound_enable) {
+            if (this._activeAudioExt == -1) return;
+            var soundPath = path + "." + this._activeAudioExt;
+            var soundCache = new Audio(soundPath);
+            soundCache.preload = 'auto';
+
+            soundCache.addEventListener('canplaythrough', function (e) {
+                this.removeEventListener('canplaythrough', arguments.callee,
+                    false);
+            }, false);
+            soundCache.addEventListener("error", function (e) {
+                cc.Loader.shareLoader().onResLoadingErr();
+            }, false);
+
+            // load it
+            soundCache.load();
+            this._audioList[path] = soundCache;
+        }
+        cc.Loader.shareLoader().onResLoaded();
+    },
+
+    /**
+     * Unload the preloaded effect from internal buffer
+     * @param {String} path
+     * @example
+     * //example
+     * cc.AudioManager.sharedEngine().unloadEffect(EFFECT_FILE);
+     */
+    unloadEffect:function (path) {
+        if (this._audioList.hasOwnProperty(path)) {
+            delete this._audioList[path];
+        }
+    },
+    _getEffectList:function (elt) {
+        if (this._audioList != null) {
+            return this._audioList[elt];
+        }
+        else {
+            return null;
+        }
+    },
+    /**
+     *  Stop all background music and sound effects
+     * @example
+     * //example
+     * cc.AudioManager.sharedEngine().end();
+     */
+    end:function () {
+        this.stopBackgroundMusic();
+        this.stopAllEffects();
+    }
+});
+
+/**
+ * Get the shared Engine object, it will new one when first time be called.
+ * @return {cc.AudioManager}
+ */
+cc.AudioManager.sharedEngine = function () {
+    if (!cc.sharedEngine) {
+        cc.sharedEngine = new cc.AudioManager();
+    }
+    return cc.sharedEngine;
+};
\ No newline at end of file
Index: Graphic/EventHandler/ScrollEvent.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/EventHandler/ScrollEvent.js	(revision )
+++ Graphic/EventHandler/ScrollEvent.js	(revision )
@@ -0,0 +1,26 @@
+/**
+ * Created with JetBrains WebStorm.
+ * User: Locke
+ * Date: 2012/7/5
+ * Time: 下午 3:45
+ * To change this template use File | Settings | File Templates.
+ */
+var Graphic = Graphic = Graphic || {};
+Graphic.ScrollEvent = Graphic.Event.extend({
+    type : "ScrollEvent",
+    triggerType : null
+});
+Graphic.ScrollEvent.TriggerType = {};
+Graphic.ScrollEvent.TriggerType.SCROLL = "scroll";
+Graphic.ScrollEvent.SCROLL_UP = {
+    type : "scroll_up",
+    triggerType : Graphic.ScrollEvent.TriggerType.SCROLL
+};
+Graphic.ScrollEvent.SCROLL_DOWN = {
+    type : "scroll_down",
+    triggerType : Graphic.ScrollEvent.TriggerType.SCROLL
+};
+Graphic.ScrollEvent.SCROLL = {
+    type : "scroll",
+    triggerType : Graphic.ScrollEvent.TriggerType.SCROLL
+};
\ No newline at end of file
Index: Graphic/com/SimpleButton.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/com/SimpleButton.js	(revision )
+++ Graphic/com/SimpleButton.js	(revision )
@@ -0,0 +1,86 @@
+/**
+ * Created with JetBrains WebStorm.
+ * User: Locke
+ * Date: 2012/6/21
+ * Time: 上午 11:09
+ * To change this template use File | Settings | File Templates.
+ */
+var Graphic = Graphic = Graphic || {};
+Graphic.Component = Graphic.Component||{};
+Graphic.Component.SimpleButton = Graphic.Component.Button.extend({
+    _currentItem:null,
+    ctor:function (width, height, type) {
+        this._super();
+        this.init();
+        if (!width) {
+            width = Graphic.Component.SimpleButton.defaultWidth;
+        }
+        if (!height) {
+            height = Graphic.Component.SimpleButton.defaultHeight;
+        }
+        if (!type) {
+            type = Graphic.Component.SimpleButton.Default;
+        }
+        this._default_texture_size = cc.SizeMake(width, height);
+        var texture = Graphic.Utils.GradientTexture(cc.SizeMake(width - 2, height - 2), cc.ccc4(255, 255, 255, 255), Graphic.Utils.Gradient.RectVFrom, type);
+        texture = Graphic.Utils.SetTextureBackgroundSize(texture, width, height);
+        this.initWithTexture(texture);
+        this.initText();
+    },
+    _setNodeDirtyForCache:function(){
+        this._super();
+        if(this._bButtonUp)
+        this._currentItem=this._bButtonUp.isVisible()?this._bButtonUp:this._bButtonDown;
+    },
+    initSize:function(width, height, type)
+    {
+        this.removeChild(this._bButtonDown);
+        this.removeChild(this._bButtonUp);
+        this._bButtonUp = null;
+        this._bButtonDown = null;
+        this._textField = null;
+        if (!type) {
+            type = Graphic.Component.SimpleButton.Default;
+        }
+        this._default_texture_size = cc.SizeMake(width, height);
+        var texture = Graphic.Utils.GradientTexture(cc.SizeMake(width - 2, height - 2), cc.ccc4(255, 255, 255, 255), Graphic.Utils.Gradient.RectVFrom, type);
+        texture = Graphic.Utils.SetTextureBackgroundSize(texture, width, height);
+        this.initWithTexture(texture);
+        this.initText();
+    },
+    initText:function () {
+        if (this._textField) return;
+        var fontSize = Math.floor(this._default_texture.height - this._default_texture.height / 2);
+        this._textField = cc.LabelTTF.create("", this._m_tRect.size, cc.TEXT_ALIGNMENT_CENTER, "Arial", fontSize);
+        this._textField.setPosition(cc.ccp(this._default_texture.width / 2, this._m_tRect.size.height / 2));
+        this._textField.setAnchorPoint(cc.ccp(0.5, 0.9));
+        this._textField.setColor(cc.ccc4(0, 0, 0, 255));
+        //this._textField.detachWithIME();
+        //this._textField.removeDelegate();
+        this._default_texture.addChild(this._textField);
+        this._default_texture.setAnchorPoint(cc.ccp(0, 1));
+        //this.addChild(this._default_texture);
+    },
+    setText:function (text) {
+        this._textField.setString(text);
+        var copy = Graphic.Utils.CreateCanvas(this._default_texture.width, this._default_texture.height);
+        this._default_texture.visit(copy);
+        var texture = Graphic.Utils.CreateImageData(copy);
+        var up = Graphic.Effect.Convolution(cc.renderContext, texture, Graphic.Effect.Bevel, 254);
+        var down = Graphic.Effect.Convolution(cc.renderContext, texture, Graphic.Effect.vBevel, 254);
+        this._bButtonDown.setTexture(Graphic.Utils.ImageDatasToTexture(down));
+        this._bButtonUp.setTexture(Graphic.Utils.ImageDatasToTexture(up));
+    }
+
+});
+Graphic.Component.SimpleButton.prototype.__defineGetter__("width", function () {
+    return this._m_tScaleX * this._default_texture_size.width;
+});
+
+Graphic.Component.SimpleButton.prototype.__defineGetter__("height", function () {
+    return this._m_tScaleY * this._default_texture_size.height;
+});
+Graphic.Component.SimpleButton.defaultWidth = 128;
+Graphic.Component.SimpleButton.defaultHeight = 32;
+Graphic.Component.SimpleButton.Default = [cc.ccc4(200, 200, 200, 255), cc.ccc4(255, 255, 255, 255)];
+Graphic.Component.SimpleButton.General = [cc.ccc4(250, 250, 250, 255), cc.ccc4(255, 255, 255, 255)];
\ No newline at end of file
Index: CSS/frame.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- CSS/frame.css	(revision )
+++ CSS/frame.css	(revision )
@@ -0,0 +1,1 @@
+
\ No newline at end of file
Index: Graphic/Control/Animation.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/Control/Animation.js	(revision )
+++ Graphic/Control/Animation.js	(revision )
@@ -0,0 +1,73 @@
+/**
+ * Created with JetBrains WebStorm.
+ * User: Locke
+ * Date: 2012/6/11
+ * Time: 上午 9:35
+ * To change this template use File | Settings | File Templates.
+ */
+var Graphic = Graphic = Graphic || {};
+Graphic.Animation = cc.Class.extend({
+    _m_tAnimationBegin:false,
+    _m_tQueue:[],
+    ctor:function () {
+
+    },
+    isAnimationBegin:function () {
+        return this._m_tAnimationBegin;
+    },
+    AnimationStart:function () {
+        if (this._m_tAnimationBegin)return;
+        this._m_tAnimationBegin = true;
+        cc.Director.sharedDirector().getScheduler().scheduleUpdateForTarget(this, 0, false);
+    },
+    AnimationStop:function () {
+        this._m_tAnimationBegin = false;
+        ccc.Director.sharedDirector().getScheduler().unscheduleUpdateForTarget(this);
+    },
+    addTarget:function (target) {
+        this._m_tQueue.push(target);
+    },
+    removeTarget:function (target) {
+        var index = this._m_tQueue.indexOf(target);
+        this._m_tQueue.splice(index, 1);
+    },
+    numActions:function (pTarget) {
+        if (pTarget)
+            return cc.ActionManager.sharedManager().numberOfRunningActionsInTarget(pTarget.target);
+        else return 0;
+    },
+    dispatch:function (queue) {
+        var evt = Graphic.Dispatcher(queue.type, queue.target);
+        queue.trigger(evt);
+    },
+    recycle:function () {
+        for (var i = 0; i < this._m_tQueue.length; i++) {
+            if (this._m_tQueue[i] == null)this.removeTarget(this._m_tQueue[i]);
+        }
+        if (this._m_tQueue.length == 0)this.AnimationStop();
+    },
+    update:function () {
+        var recycle = false;
+        for (var i = 0; i < this._m_tQueue.length; i++) {
+            if (this._m_tQueue[i]) {
+                var action = this.numActions(this._m_tQueue[i]);
+                if (action == 0) {
+                    if (this._m_tQueue[i].type == Graphic.Event.COMPLETE) {
+                        if (this._m_tQueue[i].trigger != null) {
+                            this.dispatch(this._m_tQueue[i]);
+                        }
+                    }
+                    recycle = true;
+                    this._m_tQueue[i] = null;
+                }
+            }
+        }
+        if (recycle)this.recycle();
+    }
+});
+Graphic.Animation.prototype.add = function (action, dispatcher) {
+    this.AnimationStart();
+    cc.ActionManager.sharedManager().addAction(action, dispatcher.target);
+    this.addTarget(dispatcher);
+};
+Graphic.Animation.Queue = new Graphic.Animation();
\ No newline at end of file
Index: Graphic/com/TextInputBox.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/com/TextInputBox.js	(revision )
+++ Graphic/com/TextInputBox.js	(revision )
@@ -0,0 +1,162 @@
+/**
+ * Created with JetBrains WebStorm.
+ * User: Locke
+ * Date: 2012/6/14
+ * Time: 下午 4:48
+ * To change this template use File | Settings | File Templates.
+ */
+var Graphic = Graphic = Graphic || {};
+Graphic.Component = Graphic.Component||{};
+
+Graphic.Component.TextField = cc.TextFieldTTF.extend({
+    ctor:function()
+    {
+        this._super();
+    },
+    insertText:function (text, len)
+    {
+        if(len == -1)
+        {
+            this._super(text,len);
+        }else
+        {
+            if(IO.KeyCodeToString!="")
+            {
+                this._super(IO.KeyCodeToString,len);
+                cc.Log(IO.KeyCodeToString);
+            }else this._super(text,len);
+        }
+    }
+});
+Graphic.Component.TextField.create = function (placeholder, dimensions, alignment, fontName, fontSize) {
+    switch (arguments.length) {
+        case 5:
+            var ret = new Graphic.Component.TextField();
+            if (ret && ret.initWithPlaceHolder("", dimensions, alignment, fontName, fontSize)) {
+                if (placeholder) {
+                    ret.setPlaceHolder(placeholder);
+                }
+                return ret;
+            }
+            return null;
+            break;
+        case 3:
+            var ret = new Graphic.Component.TextField();
+            fontName = arguments[1];
+            fontSize = arguments[2];
+            if (ret && ret.initWithString("", fontName, fontSize)) {
+                if (placeholder) {
+                    ret.setPlaceHolder(placeholder);
+                }
+                return ret;
+            }
+            return null;
+            break;
+        default:
+            throw "Argument must be non-nil ";
+            break;
+    }
+};
+Graphic.Component.TextInputBox = Graphic.Sprite.extend({
+    _pTrackNode:null,
+    _m_tFocusIn:false,
+    _nCharLimit:0,
+    _pTextFieldAction:null,
+    _m_tAnimationBegin:false,
+    ctor:function () {
+        this.init();
+        this._nCharLimit = 10;
+        this._pTextFieldAction = cc.RepeatForever.create(
+            cc.Sequence.create(
+                cc.FadeOut.create(0.25),
+                cc.FadeIn.create(0.25)));
+        //this.setAnchorPoint(cc.ccp(0.5, 0.5));
+        var background = cc.LayerColor.create(cc.ccc4(255, 255, 255, 255), 128, 24);
+        this.addChild(background);
+        background.setPosition(cc.ccp(-64, 0));
+        var textField = Graphic.Component.TextField.create("<click>", new cc.Size(128, 20), cc.TextAlignmentLeft, "Arial", 20);
+        textField.setPosition(cc.ccp(0, 12));
+        textField.setColor(cc.ccc4(0, 0, 0, 255));
+        this.addChild(textField, 1);
+        this._pTrackNode = textField;
+        this._pTrackNode.action = [cc.FadeTo.create(0.5, 255), cc.FadeTo.create(0.5, 128)];
+        this._pTrackNode.actionIndex = 0;
+        this._pTrackNode.setDelegate(this);
+        this.addEventListener(Graphic.MouseEvent.MOUSE_DOWN, this.onClickTrackNode);
+    },
+    init:function () {
+        this._super();
+    },
+    onClickTrack:function (evt) {
+        if (evt.target._m_tAnimationBegin) {
+            var textField = evt.target._pTrackNode;
+            Graphic.Animation.Queue.add(textField[textField.actionIndex], Graphic.Dispatcher(Graphic.Event.COMPLETE, evt.target, evt.target.onClickTrack));
+            textField.actionIndex = (textField.actionIndex + 1) % textField.action.length;
+        }
+    },
+    onClickTrackNode:function (evt) {
+        var clicked = evt.target._m_tInRange;
+        var textField = evt.target._pTrackNode;
+        if (clicked) {
+            // TextFieldTTFTest be clicked
+            if (evt.target._m_tAnimationBegin)return;
+            cc.Log("TextFieldTTFDefaultTest:CCTextFieldTTF attachWithIME");
+            textField.attachWithIME();
+            evt.target._m_tAnimationBegin = true;
+            //evt.target.onClickTrack(evt);
+        }
+        else {
+            // TextFieldTTFTest not be clicked
+            cc.Log("TextFieldTTFDefaultTest:CCTextFieldTTF detachWithIME");
+            textField.detachWithIME();
+            evt.target._m_tAnimationBegin = false;
+        }
+    },
+    ccTouchesBegan:function (pTouches, pEvent) {
+        if (!this.bIsMouseDown) {
+            this.dispatchEvent(Graphic.MouseEvent.MOUSE_DOWN);
+        }
+        this.bIsMouseDown = true;
+    },
+    ccTouchesEnded:function (pTouches, pEvent) {
+        if (this.bIsMouseDown) {
+            this.dispatchEvent(Graphic.MouseEvent.MOUSE_DOWN);
+        }
+        this.bIsMouseDown = false;
+    },
+    onTextFieldAttachWithIME:function (sender) {
+        if (!this._m_tAnimationBegin) {
+            this._pTrackNode.runAction(this._pTextFieldAction);
+            this._m_tAnimationBegin = true;
+        }
+        return false;
+    },
+    onTextFieldDetachWithIME:function (sender) {
+        if (this._m_tAnimationBegin) {
+            this._pTrackNode.stopAction(this._pTextFieldAction);
+            this._pTrackNode.setOpacity(255);
+            this._m_tAnimationBegin = false;
+        }
+        return false;
+    },
+    onTextFieldInsertText:function (sender, text, len) {
+        // if insert enter, treat as default to detach with ime
+        if ('\n' == text) {
+            return false;
+        }
+
+        // if the textfield's char count more than m_nCharLimit, doesn't insert text anymore.
+        if (sender.getCharCount() >= this._nCharLimit) {
+            return true;
+        }
+        //this._super(sender, text, len);
+    },
+    onTextFieldDeleteBackward:function (sender, delText, len) {
+
+    },
+    onDraw:function (sender) {
+        return false;
+    }
+});
+Graphic.TEXT_DEFAULT_SIZE = cc.Size(128, 20);
+Graphic.TEXT_DEFAULT_LAYER_SIZE = cc.Size(128, 24);
\ No newline at end of file
Index: Graphic/com/Button.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/com/Button.js	(revision )
+++ Graphic/com/Button.js	(revision )
@@ -0,0 +1,159 @@
+/**
+ * Created with JetBrains WebStorm.
+ * User: Locke
+ * Date: 2012/6/18
+ * Time: 上午 9:48
+ * To change this template use File | Settings | File Templates.
+ */
+var Graphic = Graphic = Graphic || {};
+Graphic.Component = Graphic.Component||{};
+Graphic.Component.Button = Graphic.Sprite.extend({
+    _bButtonDown:null,
+    _bButtonUp:null,
+    _moveEffect:null,
+    _default_texture:null,
+    _default_texture_size:null,
+    _textField:null,
+
+    ctor:function (pButtonUp, pButtonDown) {
+        this.init();
+
+        switch (arguments.length) {
+            case 2:
+            case 1:
+                var texture;
+                if (typeof pButtonUp == "string") {
+                    this.initWithTexture(pButtonUp, pButtonDown);
+
+                } else if (typeof pButtonUp == "object") {
+                    texture = Graphic.Utils.TextureToImageData(pButtonUp.getTexture());
+                    texture = Graphic.Effect.Convolution(cc.renderContext, texture, Graphic.Effect.vBevel, 254);
+                    pButtonDown = this._initConver(texture, pButtonUp.getContentSize());
+                    delete texture;
+                    this.initChild(pButtonUp, pButtonDown);
+                } else if (typeof pButtonUp == "object" && typeof pButtonDown == "object") {
+                    this.initChild(pButtonUp, pButtonDown);
+                }
+                this.setScale(1);
+                break;
+        }
+
+    },
+    init:function () {
+        this._super();
+    },
+
+    initWithTexture:function (texture, color) {
+        if (typeof texture == "string") {
+            var mTexture = this._default_texture = new Graphic.Sprite(texture);
+        } else {
+            var mTexture = this._default_texture = new Graphic.Sprite();
+            mTexture.initWithTexture(texture);
+        }
+        var rect = cc.RectMake(0, 0, mTexture.getContentSize().width, mTexture.getContentSize().height);
+        if (color) {
+            mTexture.setColor(color);
+        }
+        texture = Graphic.Utils.TextureToImageData(mTexture.getTexture());
+        var up = Graphic.Effect.Convolution(cc.renderContext, texture, Graphic.Effect.Bevel, 254);
+        var down = Graphic.Effect.Convolution(cc.renderContext, texture, Graphic.Effect.vBevel, 254);
+        var pButtonDown = this._initConver(down, rect);
+        var pButtonUp = this._initConver(up, rect);
+        this.setAnchorPoint(cc.ccp(0.5, 0.5));
+        this._bButtonDown = pButtonDown;
+        this._bButtonUp = pButtonUp;
+        this.initChild(pButtonUp, pButtonDown);
+        this.setScale(1);
+        delete texture;
+    },
+    initChild:function (pButtonUp, pButtonDown) {
+        this.addChild(pButtonUp);
+        this.addChild(pButtonDown);
+        pButtonDown.setVisible(this.bIsMouseDown);
+        pButtonUp.setVisible(!this.bIsMouseDown);
+        this.addEventListener(Graphic.MouseEvent.MOUSE_MOVE, function (evt) {
+        });
+    },
+    _initConver:function (texture, rect) {
+        var pButton = new Graphic.Sprite();
+        pButton.initWithTexture(Graphic.Utils.ImageDatasToTexture(texture), rect);
+        pButton.setAnchorPoint(cc.ccp(0, 0));
+        return pButton;
+    },
+
+    setColor:function (color) {
+        this._bButtonUp.setColor(color);
+        this._bButtonDown.setColor(color);
+    },
+    ccTouchesBegan:function (pTouches, pEvent) {
+        this._super(pTouches, pEvent);
+        var InRange = this._m_tInRange;
+        if (InRange) {
+            var bIsMouseDown = this.bIsMouseDown;
+            this._bButtonDown.setVisible(bIsMouseDown);
+            this._bButtonUp.setVisible(!bIsMouseDown);
+            this.dispatchEvent(Graphic.ButtonEvent.BUTTON_DOWN);
+        }
+    },
+    ccTouchesMoved:function (pTouches, pEvent) {
+        this._super(pTouches, pEvent);
+        var InRange = this._m_tInRange;
+        if (!InRange) {
+            var bIsMouseDown = this.bIsMouseDown = false;
+            if (this._bButtonDown.isVisible() != bIsMouseDown) {
+                this._bButtonDown.setVisible(bIsMouseDown);
+                this._bButtonUp.setVisible(!bIsMouseDown);
+            }
+        }else{
+            if(this.bIsMouseDown)
+            this.dispatchEvent(Graphic.ButtonEvent.BUTTON_DOWN);
+        }
+    },
+    ccTouchesEnded:function (pTouches, pEvent) {
+        this._super(pTouches, pEvent);
+        var InRange = this._m_tInRange;
+        if (InRange) {
+            var bIsMouseDown = this.bIsMouseDown;
+            this._bButtonDown.setVisible(bIsMouseDown);
+            this._bButtonUp.setVisible(!bIsMouseDown);
+            this.dispatchEvent(Graphic.ButtonEvent.BUTTON_UP);
+            this.dispatchEvent(Graphic.ButtonEvent.BUTTON_CLICK);
+        }
+    },
+    dispatchEvent:function (evt) {
+        this._super(evt);
+        if (evt.triggerType == Graphic.MouseEvent.TriggerType.MOVE && this._moveEffect)this._moveEffect.dispatch(evt, this);
+    }
+});
+Graphic.Component.Button.prototype.setMoveEffect = function (type) {
+    this._moveEffect = type;
+    this._moveEffect.init(this);
+};
+Graphic.Component.Button.MoveEffect = {};
+Graphic.Component.Button.MoveEffect.Alpha =
+{
+    init:function (target) {
+        target.setOpacity(255);
+    },
+    dispatch:function (evt, target) {
+        if (evt == Graphic.MouseEvent.MOUSE_OVER) {
+            target.setOpacity(128);
+        } else if (evt == Graphic.MouseEvent.MOUSE_OUT) {
+            target.setOpacity(255);
+        }
+    }
+};
+
+Graphic.Component.Button.MoveEffect.AlphaInverse =
+{
+    init:function (target) {
+        target.setOpacity(128);
+    },
+    dispatch:function (evt, target) {
+        if (evt == Graphic.MouseEvent.MOUSE_OVER) {
+            target.setOpacity(255);
+        } else if (evt == Graphic.MouseEvent.MOUSE_OUT) {
+            target.setOpacity(128);
+        }
+    }
+};
\ No newline at end of file
Index: Graphic/EventHandler/Event.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/EventHandler/Event.js	(revision )
+++ Graphic/EventHandler/Event.js	(revision )
@@ -0,0 +1,44 @@
+/**
+ * @author Locke
+ */
+var Graphic = Graphic = Graphic || {};
+
+Graphic.Event = cc.Class.extend({
+    type:"Event",
+    triggerType:null
+});
+Graphic.Event.TriggerType={};
+Graphic.Event.TriggerType.EVENT="event";
+Graphic.Event.COMPLETE = {
+    type:"complete",
+    triggerType:Graphic.Event.TriggerType.EVENT
+};
+Graphic.Event.ACTIVE = {
+    type:"active",
+    triggerType:Graphic.Event.TriggerType.EVENT
+};
+Graphic.Event.CONNECT = {
+    type:"connect",
+    triggerType:Graphic.Event.TriggerType.EVENT
+};
+Graphic.Event.ADD = {
+    type:"add",
+    triggerType:Graphic.Event.TriggerType.EVENT
+};
+Graphic.Event.REMOVE = {
+    type:"remove",
+    triggerType:Graphic.Event.TriggerType.EVENT
+};
+
+Graphic.Event.dispatchEvent = function (type, target) {
+    var evt = Graphic.Dispatcher(type, target);
+    target.Trigger[type.triggerType][type.type](evt);
+};
+
+Graphic.Dispatcher = function (_type, _target,_trigger) {
+    return {
+        trigger:_trigger,
+        target:_target,
+        type:_type
+    };
+};
Index: src/Window.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Window.js	(revision )
+++ src/Window.js	(revision )
@@ -0,0 +1,32 @@
+/**
+ * Created with JetBrains WebStorm.
+ * User: Locke
+ * Date: 2012/6/13
+ * Time: 上午 10:46
+ * To change this template use File | Settings | File Templates.
+ */
+var Graphic = Graphic = Graphic || {};
+var SWindow = Graphic.Sprite.extend({
+    _m_tForeground:null,
+    _m_tBackground:null,
+    ctor:function()
+    {
+        this.init();
+    },
+    init:function()
+    {
+        this._super();
+        this._m_tBackground = new Graphic.Sprite();
+        this.addChild(this._m_tBackground);
+        this._m_tForeground = new Graphic.Sprite();
+        this.addChild(this._m_tForeground);
+    },
+    addToBackground:function(object,index)
+    {
+        this._m_tBackground.addChild(object,index);
+    },
+    addToForeground:function(object,index)
+    {
+        this._m_tForeground.addChild(object,index);
+    }
+});
\ No newline at end of file
Index: Graphic/Utils/Utils.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Graphic/Utils/Utils.js	(revision )
+++ Graphic/Utils/Utils.js	(revision )
@@ -0,0 +1,230 @@
+/**
+ * Created with JetBrains WebStorm.
+ * User: Locke
+ * Date: 2012/6/20
+ * Time: 上午 9:17
+ * To change this template use File | Settings | File Templates.
+ */
+var Graphic = Graphic = Graphic || {};
+Graphic.Utils = {};
+Graphic.Utils.SpriteToImageData = function (sprite) {
+    var canvas = document.createElement("canvas");
+    var ctx = canvas.getContext("2d");
+    var w = sprite._contentSize.width;
+    var h = sprite._contentSize.height;
+    canvas.width = w;
+    canvas.height = h;
+    sprite.draw(ctx);
+    return ctx.getImageData(0, 0, w, h);
+};
+Graphic.Utils.CreateCanvas = function (width,height) {
+    var w = width;
+    var h = height;
+    var textureCache = [];
+    var canvas = document.createElement("canvas");
+    canvas.width = w;
+    canvas.height = h;
+    var ctx = canvas.getContext("2d");
+    return ctx;
+};
+Graphic.Utils.CreateTextureDraw = function (texture) {
+    var w = texture.width;
+    var h = texture.height;
+    var textureCache = [];
+
+    var canvas = document.createElement("canvas");
+    canvas.width = w;
+    canvas.height = h;
+
+    var ctx = canvas.getContext("2d");
+    ctx.drawImage(texture, 0, 0);
+    return ctx;
+};
+Graphic.Utils.CreateImageData = function (texture) {
+    var w = texture.canvas.width;
+    var h = texture.canvas.height;
+    return texture.getImageData(0, 0, w, h);
+};
+Graphic.Utils.TextureToImageData = function (texture) {
+    var w = texture.width;
+    var h = texture.height;
+    var textureCache = [];
+
+    var canvas = document.createElement("canvas");
+    canvas.width = w;
+    canvas.height = h;
+
+    var ctx = canvas.getContext("2d");
+    ctx.drawImage(texture, 0, 0);
+
+    return ctx.getImageData(0, 0, w, h);
+};
+Graphic.Utils.CutTexture = function (texture, x, y, w, h) {
+    var _w = texture.width;
+    var _h = texture.height;
+    var textureCache = [];
+
+    var canvas = document.createElement("canvas");
+    canvas.width = _w;
+    canvas.height = _h;
+
+    var ctx = canvas.getContext("2d");
+    ctx.drawImage(texture, 0, 0);
+
+    return ctx.getImageData(x, y, w, h);
+};
+Graphic.Utils.SetTextureBackgroundSize = function (texture, w, h) {
+    var _w = texture.width;
+    var _h = texture.height;
+    var x = w / 2 - _w / 2;
+    var y = h / 2 - _h / 2;
+    var textureCache = [];
+
+    var canvas = document.createElement("canvas");
+    canvas.width = w;
+    canvas.height = h;
+
+    var ctx = canvas.getContext("2d");
+    Graphic.Utils.FillRect(ctx, cc.RectMake(0, 0, w, h), cc.ccc4(0, 0, 0, 0));
+    ctx.drawImage(texture, x, y);
+
+    return canvas;//Graphic.Utils.ImageDatasToTexture(ctx.getImageData(0, 0, w, h));
+}
+Graphic.Utils.ImageDatasToTexture = function (image, rect) {
+    if (!rect) {
+        rect = new cc.Rect();
+        rect.size = new cc.Size(image.width, image.height);
+    }
+    var buff = document.createElement("canvas");
+    buff.width = rect.size.width;
+    buff.height = rect.size.height;
+    var ctx = buff.getContext("2d");
+
+    //ctx.drawImage(image.data, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height, 0, 0, rect.size.width, rect.size.height);
+    ctx.putImageData(image, 0, 0, 0, 0, image.width, image.height);
+    return buff;
+};
+Graphic.Utils.FillRect = function (ctx, rect, color, Gradient, color_array) {
+    var tGradient = Graphic.Utils.Gradient.MakeGradient(Gradient, ctx, rect);
+    tGradient.addColorStop(0, "rgba(" + color.r + "," + color.g + ","
+        + color.b + "," + color.a / 255 + ")");
+    if (color_array) {
+        var numColor = 1 / color_array.length;
+        for (var i = 0; i < color_array.length; i++) {
+            color = color_array[i];
+            tGradient.addColorStop((i + 1) * numColor, "rgba(" + color.r + "," + color.g + ","
+                + color.b + "," + color.a / 255 + ")");
+        }
+    }
+    ctx.fillStyle = tGradient;
+    ctx.fillRect(rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
+};
+Graphic.Utils.GradientTexture = function (size, color, Gradient, color_array) {
+    var canvas = document.createElement("canvas");
+    canvas.width = size.width;
+    canvas.height = size.height;
+    var ctx = canvas.getContext("2d");
+    Graphic.Utils.FillRect(ctx,cc.RectMake(0,0,size.width,size.height),color,Gradient,color_array);
+    return canvas;
+};
+Graphic.Utils.DrawTexture = function (ctx, texture, x, y) {
+    ctx.drawImage(texture, 0, 0);
+};
+Graphic.Utils.DrawPoly = function (ctx, vertices, line, color, numOfVertices, closePolygon, fill) {
+    if (fill == 'undefined') {
+        fill = false;
+    }
+
+    if (vertices == null) {
+        return;
+    }
+    if (vertices.length < 3) {
+        throw new Error("Polygon's point must greater than 2");
+    }
+    ctx.strokeStyle = "rgba(" + color.r + "," + color.g + ","
+        + color.b + "," + color.a / 255 + ")";
+    ctx.lineWidth = line;
+    var firstPoint = vertices[0];
+    ctx.beginPath();
+    ctx.moveTo(firstPoint.x * cc.CONTENT_SCALE_FACTOR(), -firstPoint.y * cc.CONTENT_SCALE_FACTOR());
+    for (var i = 1; i < vertices.length; i++) {
+        ctx.lineTo(vertices[i].x * cc.CONTENT_SCALE_FACTOR(), -vertices[i].y * cc.CONTENT_SCALE_FACTOR());
+    }
+    if (closePolygon) {
+        ctx.closePath();
+    }
+
+    if (fill) {
+        ctx.fill();
+    } else {
+        ctx.stroke();
+    }
+};
+Graphic.Utils.Gradient = Graphic.Utils.Gradient || {};
+Graphic.Utils.Gradient.MakeGradient = function (gradient, ctx, rect) {
+    return gradient != undefined ? gradient.MAKE(ctx, rect) : Graphic.Utils.Gradient.RectTo.MAKE(ctx, rect);
+};
+Graphic.Utils.Gradient.RectTo =
+{
+    TYPE:0,
+    MAKE:function (ctx, rect) {
+        return ctx.createLinearGradient(rect.origin.x, rect.size.height, rect.origin.x + rect.size.width, (rect.origin.y + rect.size.height));
+    }
+};
+Graphic.Utils.Gradient.RectFrom =
+{
+    TYPE:0,
+    MAKE:function (ctx, rect) {
+        return ctx.createLinearGradient(rect.origin.x + rect.size.width, (rect.origin.y + rect.size.height), rect.origin.x, rect.size.height);
+    }
+};
+
+Graphic.Utils.Gradient.RectVTo =
+{
+    TYPE:0,
+    MAKE:function (ctx, rect) {
+        return ctx.createLinearGradient(rect.origin.x, rect.origin.y, rect.origin.x, (rect.origin.y + rect.size.height));
+    }
+};
+Graphic.Utils.Gradient.RectVFrom =
+{
+    TYPE:0,
+    MAKE:function (ctx, rect) {
+        return ctx.createLinearGradient(rect.origin.x, rect.origin.y + rect.size.height, rect.origin.x, (rect.origin.y));
+    }
+};
+Graphic.Utils.Gradient.RectLU =
+{
+    TYPE:0,
+    MAKE:function (ctx, rect) {
+        return ctx.createLinearGradient(rect.origin.x, rect.origin.y, rect.origin.x + rect.size.width, (rect.origin.y + rect.size.height));
+    }
+};
+Graphic.Utils.Gradient.RectLD =
+{
+    TYPE:0,
+    MAKE:function (ctx, rect) {
+        return ctx.createLinearGradient(rect.origin.x, rect.origin.y + rect.size.height, rect.origin.x + rect.size.width, (rect.origin.y ));
+    }
+};
+Graphic.Utils.Gradient.RectRU =
+{
+    TYPE:0,
+    MAKE:function (ctx, rect) {
+        return ctx.createLinearGradient(rect.origin.x + rect.size.width, rect.origin.y, rect.origin.x, (rect.origin.y + rect.size.height));
+    }
+};
+Graphic.Utils.Gradient.RectRD =
+{
+    TYPE:0,
+    MAKE:function (ctx, rect) {
+        return ctx.createLinearGradient(-rect.origin.x + rect.size.width, (rect.origin.y + rect.size.height), rect.origin.x, -rect.size.height);
+    }
+};
+Graphic.Utils.Gradient.RadialCenter =
+{
+    TYPE:1,
+    MAKE:function (ctx, rect) {
+        return ctx.createRadialGradient(rect.size.width / 2, rect.size.height / 2, 0, (rect.size.width + rect.size.height) / 2, (rect.size.width + rect.size.height) / 2, (rect.size.width + rect.size.height) / 2);
+    }
+};
\ No newline at end of file
